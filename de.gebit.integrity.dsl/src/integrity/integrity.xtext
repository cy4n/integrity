grammar de.gebit.integrity.DSL hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes

generate dsl "http://integrity.dsl"

Model:
	{Model} NL statements+=Statement*;
	
Statement:
	Import | PackageDefinition | ForkDefinition | VariantDefinition;
	
VisibleSingleLineComment:
	content=SL_VISIBLE_COMMENT NL;
	
VisibleMultiLineComment:
	content=ML_VISIBLE_COMMENT NL;
	
VisibleDivider:
	content=DIVIDER NL;
	
PackageDefinition:
	'packagedef' NL name=QualifiedName 'with' NL statements+=PackageStatement* 'packageend' NL;
	
PackageStatement:
	Import | ForkDefinition | VariantDefinition | TestDefinition | CallDefinition | OperationDefinition | SuiteDefinition | VariableDefinition | ConstantDefinition;

Import:
	'import' NL importedNamespace=QualifiedNameWithWildcard NL;
	
ForkDefinition:
	'forkdef' NL name=QualifiedName NL (description=STRING NL)? ('uses' NL forkerClass=JavaClassReference NL)? (parameters+=ForkParameter NL)*;
	
ForkParameter:
	name=FixedParameterName NL ':' NL value=ValueOrEnumValueOrOperation;
	
VariantDefinition:
	'variantdef' NL name=QualifiedName NL (description=STRING NL)?;
	
TestDefinition:
	'testdef' NL name=QualifiedName NL 'uses' NL fixtureMethod=MethodReference NL;
	
CallDefinition:
	'calldef' NL name=QualifiedName NL 'uses' NL fixtureMethod=MethodReference NL;
	
SuiteDefinition:
	'suitedef' NL name=QualifiedName NL ('gets' NL (parameters+=VariableEntity NL)*)? ('requires' NL (dependencies+=[SuiteDefinition|QualifiedName] NL)*)? ('concludedby' NL (finalizers+=[SuiteDefinition|QualifiedName] NL)*)? 'with' NL (statements+=SuiteStatement)* 'suiteend' NL;

OperationDefinition:
	'operationdef' NL name=QualifiedName NL 'uses' NL operationType=[jvmTypes::JvmType|QualifiedJavaClassName] NL;

SuiteStatement:
	SuiteStatementWithResult | VariableDefinition | ConstantDefinition | VisibleSingleLineComment | VisibleMultiLineComment | VisibleDivider;
	
SuiteStatementWithResult:
	Suite | Test | TableTest | Call;
	
VariableDefinition:
	'variable' NL name=VariableEntity NL ('initially' NL initialValue=Value NL)?;
	
ConstantDefinition:
	'constant' NL name=VariableEntity NL (value=StaticValue NL)? (variantValues+=VariantValue NL)*;
	
VariantValue:
	'in' NL (names+=[VariantDefinition|QualifiedName] NL)+ ':' NL value=StaticValue;
	
VariableEntity:
	name=QualifiedName;
	
Test:
	'test' NL definition=[TestDefinition|QualifiedName] (NL parameters+=Parameter)* (NL results+=NamedResult)* (NL '=' NL result=ValueOrEnumValueOrOperationCollection)? NL;
	
TableTest:
	'tabletest' NL definition=[TestDefinition|QualifiedName] (NL parameters+=Parameter)* NLFORCED
		(parameterHeaders+=ParameterTableHeader)* (resultHeaders+=ResultTableHeader)* '|' (defaultResultColumn='=' '|')?  (NLFORCED rows+=TableTestRow)+ NLFORCED;
		
TableTestRow:
	{TableTestRow} (values+=ParameterTableValue)+;
	
ParameterTableHeader:
	'|' name=ParameterName '|'?;
	
ResultTableHeader:
	'|' name=ResultName '=' '|'?;
	
ParameterTableValue:
	'|' value=ValueOrEnumValueOrOperationCollection '|'?;
		
NamedResult:
	name=ResultName NL '=' NL value=ValueOrEnumValueOrOperationCollection;
	
ResultName:
	FixedResultName | ArbitraryParameterOrResultName;
	
FixedResultName:
	field=[jvmTypes::JvmField|ID];
	
Call:
	'call' NL (multiplier=ExecutionMultiplier NL)? definition=[CallDefinition|QualifiedName] (NL parameters+=Parameter)* (NL results+=NamedCallResult)* (NL '->' NL result=Variable)? NL;
	
NamedCallResult:
	name=ResultName NL '->' NL target=Variable;
	
Suite:
	'suite' NL (multiplier=ExecutionMultiplier NL)? definition=[SuiteDefinition|QualifiedName] NL (parameters+=SuiteParameter NL)* ('on' NL fork=[ForkDefinition|QualifiedName] NL)? ('in' NL (variants+=[VariantDefinition|QualifiedName] NL)+)?;

SuiteParameter:
	name=[VariableEntity|QualifiedName] NL ':' NL value=Value;

Parameter:
	name=ParameterName NL ':' NL value=ValueOrEnumValueOrOperationCollection;
	
ParameterName:
	FixedParameterName | ArbitraryParameterOrResultName;
	
FixedParameterName:
	annotation=[jvmTypes::JvmAnnotationReference|ID];

ArbitraryParameterOrResultName:
	'+' identifier=ID;
	
Operation:
	'(' NL (prefixOperand=ValueOrEnumValueOrOperationCollection NL)? definition=[OperationDefinition|QualifiedName] (NL 'with' postfixOperand=ValueOrEnumValueOrOperationCollection)? NL ')';
	
ValueOrEnumValueOrOperationCollection:
	value=ValueOrEnumValueOrOperation (NL ',' NL moreValues+=ValueOrEnumValueOrOperation)*;
	
ValueOrEnumValueOrOperation:
	Value | EnumValue | Operation;
	
Value:
	StaticValue | Variable;
	
StaticValue:
	StringValue | IntegerValue | DecimalValue | BooleanValue | DateValue | TimeValue | DateAndTimeValue | NullValue;
	
IntegerValue:
	integerValue=INTEGER;
	
DecimalValue:
	decimalValue=DECIMAL;
	
StringValue:
	stringValue=STRING;
	
BooleanValue:
	booleanValue=(BOOLEAN_TRUE | BOOLEAN_FALSE);
	
DateValue:
	IsoDateValue | EuropeanDateValue;
	
IsoDateValue:
	dateValue=ISODATE;
	
EuropeanDateValue:
	dateValue=EURODATE;
	
TimeValue:
	IsoTimeValue | Simple24HrsTimeValue;

IsoTimeValue:
	timeValue=ISOTIME;
	
Simple24HrsTimeValue:
	timeValue=TWENTYFOURHRSTIME;
	
DateAndTimeValue:
	IsoDateAndTimeValue | EuropeanDateAnd24HrsTimeValue;
	
IsoDateAndTimeValue:
	dateValue=ISODATE timeValue=ISOTIME;
	
EuropeanDateAnd24HrsTimeValue:
	dateValue=EURODATE NL timeValue=TWENTYFOURHRSTIME;
	
Variable:
	name=[VariableEntity|QualifiedName];
	
NullValue:
	{Null} 'null';
	
EnumValue:
	enumValue=[jvmTypes::JvmEnumerationLiteral|UPPERCASE_ID];
	
JavaClassReference:
	type=[jvmTypes::JvmType|QualifiedJavaClassName];
	
MethodReference:
	type=[jvmTypes::JvmType|QualifiedJavaClassName] '#' method=[jvmTypes::JvmOperation];
	
ExecutionMultiplier:
	count=INTEGER '*';
	
QualifiedName:
	ID('.'ID)*;
	
QualifiedJavaClassName:
	QualifiedName '.' UPPERCASE_ID;
	
QualifiedNameWithWildcard:
  	QualifiedName '.*'?;
  	
NL:
	(NEWLINE WS?)*;
	
NLFORCED:
	NEWLINE WS? NL;

terminal BOOLEAN_TRUE: 'true';
terminal BOOLEAN_FALSE: 'false';
terminal UPPERCASE_ID: ('A'..'Z') ('A'..'Z'|'a'..'z'|'_'|'0'..'9')*;
terminal ID: '^'?('a'..'z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal INTEGER returns ecore::EBigInteger: '-'? ('0'..'9')+;
terminal DECIMAL returns ecore::EBigDecimal: '-'? ('0'..'9')+ '.' ('0'..'9')+;
terminal STRING: 
			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'";
terminal ML_COMMENT: '/*' -> '*/';
terminal SL_COMMENT: '//' !('\n'|'\r')* ('\r'? '\n')?;
terminal SL_VISIBLE_COMMENT: '-- ' !('\n'|'\r')*;
terminal ML_VISIBLE_COMMENT: '/-' -> '-/';
terminal DIVIDER: '---' ('-')*;

terminal WS: (' '|'\t')+;
terminal NEWLINE: ('\r'|'\n')+;

terminal ISODATE: ('0'..'9')('0'..'9')('0'..'9')('0'..'9') '-' ('0'..'1')('0'..'9') '-' ('0'..'3')('0'..'9');
terminal ISOTIME: ('T' TWENTYFOURHRSTIME ISOTIMEZONE?) | (TWENTYFOURHRSTIME ISOTIMEZONE);
terminal ISOTIMEZONE: 'Z' | (('+' | '-') ('0'..'2')('0'..'9') ':'? ('0'..'5')('0'..'9'));

terminal EURODATE: ('0'..'3')('0'..'9') '.' ('0'..'1')('0'..'9') '.' ('0'..'9')('0'..'9')('0'..'9')('0'..'9');
terminal TWENTYFOURHRSTIME: ('0'..'2')('0'..'9') ':' ('0'..'5')('0'..'9') (':' ('0'..'6')('0'..'9'))?;

terminal ANY_OTHER: .;