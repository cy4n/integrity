grammar de.gebit.integrity.DSL hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes

generate dsl "http://integrity.dsl"

Model:
	statements+=Statement*;
	
Statement:
	PackageDefinition | Import | Suite;
	
VisibleSingleLineComment:
	content=SL_VISIBLE_COMMENT;
	
VisibleMultiLineComment:
	content=ML_VISIBLE_COMMENT;
	
PackageDefinition:
	'packagedef' name=QualifiedName 'with' statements+=PackageStatement* 'packageend';
	
PackageStatement:
	Import | ForkDefinition | TestDefinition | CallDefinition | SuiteDefinition | VariableDefinition | ConstantDefinition;

Import:
	'import' importedNamespace=QualifiedNameWithWildcard;
	
ForkDefinition:
	'forkdef' name=QualifiedName (description=STRING)?;
	
TestDefinition:
	'testdef' name=QualifiedName 'uses' fixtureMethod=MethodReference;
	
CallDefinition:
	'calldef' name=QualifiedName 'uses' fixtureMethod=MethodReference;
	
SuiteDefinition:
	'suitedef' name=QualifiedName ('gets' parameters+=VariableEntity*)? ('requires' dependencies+=[SuiteDefinition|QualifiedName]*)? 'with' statements+=SuiteStatement* 'suiteend' ('concludedby' finalizers+=[SuiteDefinition|QualifiedName]*)?;

SuiteStatement:
	SuiteStatementWithResult | Call | VariableDefinition | ConstantDefinition | VisibleSingleLineComment | VisibleMultiLineComment;
	
SuiteStatementWithResult:
	Suite | Test | TableTest;
	
VariableDefinition:
	'variable' name=VariableEntity ('initially' initialValue=Value)?;
	
ConstantDefinition:
	'constant' name=VariableEntity value=Value;
	
VariableEntity:
	name=QualifiedName;
	
Test:
	'test' definition=[TestDefinition|QualifiedName] (parameters+=Parameter)* (results+=NamedResult)* ('=' result=ValueOrEnumValueCollection)?;
	
TableTest:
	'tabletest' definition=[TestDefinition|QualifiedName] (parameters+=Parameter)*
		(parameterHeaders+=ParameterTableHeader)* (resultHeaders+=ResultTableHeader)* '|' (defaultResultColumn='=' '|')? (rows+=TableTestRow)+;
		
TableTestRow:
	{TableTestRow} (values+=ParameterTableValue)* '|';
	
ParameterTableHeader:
	'|' name=ParameterName;
	
ResultTableHeader:
	'|' name=ResultName '=';
	
ParameterTableValue:
	'|' value=ValueOrEnumValueCollection;
	
NamedResult:
	name=ResultName '=' value=ValueOrEnumValueCollection;
	
ResultName:
	FixedResultName | ArbitraryParameterOrResultName;
	
FixedResultName:
	field=[jvmTypes::JvmField|ID];
	
Call:
	'call' definition=[CallDefinition|QualifiedName] (parameters+=Parameter)* (results+=NamedCallResult)* ('->' result=Variable)?;
	
NamedCallResult:
	name=ResultName '->' target=Variable;
	
Suite:
	'suite' definition=[SuiteDefinition|QualifiedName] (parameters+=SuiteParameter)* ('on' fork=[ForkDefinition|QualifiedName])?;

SuiteParameter:
	name=[VariableEntity|QualifiedName] ':' value=Value;

Parameter:
	name=ParameterName ':' value=ValueOrEnumValueCollection;
	
ParameterName:
	FixedParameterName | ArbitraryParameterOrResultName;
	
FixedParameterName:
	annotation=[jvmTypes::JvmAnnotationReference|ID];

ArbitraryParameterOrResultName:
	'+' identifier=ID;
	
ValueOrEnumValueCollection:
	value=ValueOrEnumValue (',' moreValues+=ValueOrEnumValue)*;
	
ValueOrEnumValue:
	Value | EnumValue;
	
Value:
	StringValue | IntegerValue | DecimalValue | BooleanValue | Variable | NullValue;
	
IntegerValue:
	integerValue=INTEGER;
	
DecimalValue:
	decimalValue=DECIMAL;
	
StringValue:
	stringValue=STRING;
	
BooleanValue:
	booleanValue=(BOOLEAN_TRUE | BOOLEAN_FALSE);
	
Variable:
	name=[VariableEntity|QualifiedName];
	
NullValue:
	{Null} 'null';
	
EnumValue:
	enumValue=[jvmTypes::JvmEnumerationLiteral|UPPERCASE_ID];
	
MethodReference:
	type=[jvmTypes::JvmType|QualifiedJavaClassName] '#' method=[jvmTypes::JvmOperation];
	
QualifiedName:
	ID('.'ID)*;
	
QualifiedJavaClassName:
	QualifiedName '.' UPPERCASE_ID;
	
QualifiedNameWithWildcard:
  	QualifiedName '.*'?;
	

terminal BOOLEAN_TRUE: 'true';
terminal BOOLEAN_FALSE: 'false';
terminal UPPERCASE_ID: ('A'..'Z') ('A'..'Z'|'a'..'z'|'_'|'0'..'9')*;
terminal ID: '^'?('a'..'z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal INTEGER returns ecore::EBigInteger: '-'? ('0'..'9')+;
terminal DECIMAL returns ecore::EBigDecimal: '-'? ('0'..'9')+ '.' ('0'..'9')+;
terminal STRING: 
			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"; 
terminal ML_COMMENT: '/*' -> '*/';
terminal SL_COMMENT: '//' !('\n'|'\r')* ('\r'? '\n')?;
terminal SL_VISIBLE_COMMENT: '--' !('\n'|'\r')* ('\r'? '\n')?;
terminal ML_VISIBLE_COMMENT: '/-' -> '-/';


terminal WS: (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;