/*
* generated by Xtext
*/

package de.gebit.integrity.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class DSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		
		//Model:
		//
		//	{Model} NL statements+=Statement*;
		public ParserRule getRule() { return rule; }

		//{Model} NL statements+=Statement*
		public Group getGroup() { return cGroup; }

		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }

		//NL
		public RuleCall getNLParserRuleCall_1() { return cNLParserRuleCall_1; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPackageDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cForkDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVariantDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Statement:
		//
		//	Import | PackageDefinition | ForkDefinition | VariantDefinition;
		public ParserRule getRule() { return rule; }

		//Import | PackageDefinition | ForkDefinition | VariantDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//Import
		public RuleCall getImportParserRuleCall_0() { return cImportParserRuleCall_0; }

		//PackageDefinition
		public RuleCall getPackageDefinitionParserRuleCall_1() { return cPackageDefinitionParserRuleCall_1; }

		//ForkDefinition
		public RuleCall getForkDefinitionParserRuleCall_2() { return cForkDefinitionParserRuleCall_2; }

		//VariantDefinition
		public RuleCall getVariantDefinitionParserRuleCall_3() { return cVariantDefinitionParserRuleCall_3; }
	}

	public class VisibleCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VisibleComment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVisibleSingleLineCommentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVisibleMultiLineCommentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VisibleComment:
		//
		//	VisibleSingleLineComment | VisibleMultiLineComment;
		public ParserRule getRule() { return rule; }

		//VisibleSingleLineComment | VisibleMultiLineComment
		public Alternatives getAlternatives() { return cAlternatives; }

		//VisibleSingleLineComment
		public RuleCall getVisibleSingleLineCommentParserRuleCall_0() { return cVisibleSingleLineCommentParserRuleCall_0; }

		//VisibleMultiLineComment
		public RuleCall getVisibleMultiLineCommentParserRuleCall_1() { return cVisibleMultiLineCommentParserRuleCall_1; }
	}

	public class VisibleSingleLineCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VisibleSingleLineComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContentSL_VISIBLE_COMMENTTerminalRuleCall_0_0 = (RuleCall)cContentAssignment_0.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//VisibleSingleLineComment:
		//
		//	content=SL_VISIBLE_COMMENT NL;
		public ParserRule getRule() { return rule; }

		//content=SL_VISIBLE_COMMENT NL
		public Group getGroup() { return cGroup; }

		//content=SL_VISIBLE_COMMENT
		public Assignment getContentAssignment_0() { return cContentAssignment_0; }

		//SL_VISIBLE_COMMENT
		public RuleCall getContentSL_VISIBLE_COMMENTTerminalRuleCall_0_0() { return cContentSL_VISIBLE_COMMENTTerminalRuleCall_0_0; }

		//NL
		public RuleCall getNLParserRuleCall_1() { return cNLParserRuleCall_1; }
	}

	public class VisibleMultiLineCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VisibleMultiLineComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContentML_VISIBLE_COMMENTTerminalRuleCall_0_0 = (RuleCall)cContentAssignment_0.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//VisibleMultiLineComment:
		//
		//	content=ML_VISIBLE_COMMENT NL;
		public ParserRule getRule() { return rule; }

		//content=ML_VISIBLE_COMMENT NL
		public Group getGroup() { return cGroup; }

		//content=ML_VISIBLE_COMMENT
		public Assignment getContentAssignment_0() { return cContentAssignment_0; }

		//ML_VISIBLE_COMMENT
		public RuleCall getContentML_VISIBLE_COMMENTTerminalRuleCall_0_0() { return cContentML_VISIBLE_COMMENTTerminalRuleCall_0_0; }

		//NL
		public RuleCall getNLParserRuleCall_1() { return cNLParserRuleCall_1; }
	}

	public class VisibleDividerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VisibleDivider");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContentDIVIDERTerminalRuleCall_0_0 = (RuleCall)cContentAssignment_0.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//VisibleDivider:
		//
		//	content=DIVIDER NL;
		public ParserRule getRule() { return rule; }

		//content=DIVIDER NL
		public Group getGroup() { return cGroup; }

		//content=DIVIDER
		public Assignment getContentAssignment_0() { return cContentAssignment_0; }

		//DIVIDER
		public RuleCall getContentDIVIDERTerminalRuleCall_0_0() { return cContentDIVIDERTerminalRuleCall_0_0; }

		//NL
		public RuleCall getNLParserRuleCall_1() { return cNLParserRuleCall_1; }
	}

	public class PackageDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackagedefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cNLParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsPackageStatementParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Keyword cPackageendKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cNLParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//PackageDefinition:
		//
		//	"packagedef" NL name=QualifiedName "with" NL statements+=PackageStatement* "packageend" NL;
		public ParserRule getRule() { return rule; }

		//"packagedef" NL name=QualifiedName "with" NL statements+=PackageStatement* "packageend" NL
		public Group getGroup() { return cGroup; }

		//"packagedef"
		public Keyword getPackagedefKeyword_0() { return cPackagedefKeyword_0; }

		//NL
		public RuleCall getNLParserRuleCall_1() { return cNLParserRuleCall_1; }

		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }

		//"with"
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }

		//NL
		public RuleCall getNLParserRuleCall_4() { return cNLParserRuleCall_4; }

		//statements+=PackageStatement*
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }

		//PackageStatement
		public RuleCall getStatementsPackageStatementParserRuleCall_5_0() { return cStatementsPackageStatementParserRuleCall_5_0; }

		//"packageend"
		public Keyword getPackageendKeyword_6() { return cPackageendKeyword_6; }

		//NL
		public RuleCall getNLParserRuleCall_7() { return cNLParserRuleCall_7; }
	}

	public class PackageStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForkDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariantDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTestDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCallDefinitionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cOperationDefinitionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSuiteDefinitionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cVariableDefinitionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cConstantDefinitionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//PackageStatement:
		//
		//	Import | ForkDefinition | VariantDefinition | TestDefinition | CallDefinition | OperationDefinition | SuiteDefinition
		//
		//	| VariableDefinition | ConstantDefinition;
		public ParserRule getRule() { return rule; }

		//Import | ForkDefinition | VariantDefinition | TestDefinition | CallDefinition | OperationDefinition | SuiteDefinition |
		//
		//VariableDefinition | ConstantDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//Import
		public RuleCall getImportParserRuleCall_0() { return cImportParserRuleCall_0; }

		//ForkDefinition
		public RuleCall getForkDefinitionParserRuleCall_1() { return cForkDefinitionParserRuleCall_1; }

		//VariantDefinition
		public RuleCall getVariantDefinitionParserRuleCall_2() { return cVariantDefinitionParserRuleCall_2; }

		//TestDefinition
		public RuleCall getTestDefinitionParserRuleCall_3() { return cTestDefinitionParserRuleCall_3; }

		//CallDefinition
		public RuleCall getCallDefinitionParserRuleCall_4() { return cCallDefinitionParserRuleCall_4; }

		//OperationDefinition
		public RuleCall getOperationDefinitionParserRuleCall_5() { return cOperationDefinitionParserRuleCall_5; }

		//SuiteDefinition
		public RuleCall getSuiteDefinitionParserRuleCall_6() { return cSuiteDefinitionParserRuleCall_6; }

		//VariableDefinition
		public RuleCall getVariableDefinitionParserRuleCall_7() { return cVariableDefinitionParserRuleCall_7; }

		//ConstantDefinition
		public RuleCall getConstantDefinitionParserRuleCall_8() { return cConstantDefinitionParserRuleCall_8; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cImportedNamespaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_2_0 = (RuleCall)cImportedNamespaceAssignment_2.eContents().get(0);
		private final RuleCall cNLParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Import:
		//
		//	"import" NL importedNamespace=QualifiedNameWithWildcard NL;
		public ParserRule getRule() { return rule; }

		//"import" NL importedNamespace=QualifiedNameWithWildcard NL
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//NL
		public RuleCall getNLParserRuleCall_1() { return cNLParserRuleCall_1; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_2() { return cImportedNamespaceAssignment_2; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_2_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_2_0; }

		//NL
		public RuleCall getNLParserRuleCall_3() { return cNLParserRuleCall_3; }
	}

	public class ForkDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForkDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForkdefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNLParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cDescriptionAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_4_0_0 = (RuleCall)cDescriptionAssignment_4_0.eContents().get(0);
		private final RuleCall cNLParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cUsesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cNLParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Assignment cForkerClassAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cForkerClassJavaClassReferenceParserRuleCall_5_2_0 = (RuleCall)cForkerClassAssignment_5_2.eContents().get(0);
		private final RuleCall cNLParserRuleCall_5_3 = (RuleCall)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cParametersAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cParametersForkParameterParserRuleCall_6_0_0 = (RuleCall)cParametersAssignment_6_0.eContents().get(0);
		private final RuleCall cNLParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		
		//ForkDefinition:
		//
		//	"forkdef" NL name=QualifiedName NL (description=STRING NL)? ("uses" NL forkerClass=JavaClassReference NL)?
		//
		//	(parameters+=ForkParameter NL)*;
		public ParserRule getRule() { return rule; }

		//"forkdef" NL name=QualifiedName NL (description=STRING NL)? ("uses" NL forkerClass=JavaClassReference NL)?
		//
		//(parameters+=ForkParameter NL)*
		public Group getGroup() { return cGroup; }

		//"forkdef"
		public Keyword getForkdefKeyword_0() { return cForkdefKeyword_0; }

		//NL
		public RuleCall getNLParserRuleCall_1() { return cNLParserRuleCall_1; }

		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }

		//NL
		public RuleCall getNLParserRuleCall_3() { return cNLParserRuleCall_3; }

		//(description=STRING NL)?
		public Group getGroup_4() { return cGroup_4; }

		//description=STRING
		public Assignment getDescriptionAssignment_4_0() { return cDescriptionAssignment_4_0; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_4_0_0() { return cDescriptionSTRINGTerminalRuleCall_4_0_0; }

		//NL
		public RuleCall getNLParserRuleCall_4_1() { return cNLParserRuleCall_4_1; }

		//("uses" NL forkerClass=JavaClassReference NL)?
		public Group getGroup_5() { return cGroup_5; }

		//"uses"
		public Keyword getUsesKeyword_5_0() { return cUsesKeyword_5_0; }

		//NL
		public RuleCall getNLParserRuleCall_5_1() { return cNLParserRuleCall_5_1; }

		//forkerClass=JavaClassReference
		public Assignment getForkerClassAssignment_5_2() { return cForkerClassAssignment_5_2; }

		//JavaClassReference
		public RuleCall getForkerClassJavaClassReferenceParserRuleCall_5_2_0() { return cForkerClassJavaClassReferenceParserRuleCall_5_2_0; }

		//NL
		public RuleCall getNLParserRuleCall_5_3() { return cNLParserRuleCall_5_3; }

		//(parameters+=ForkParameter NL)*
		public Group getGroup_6() { return cGroup_6; }

		//parameters+=ForkParameter
		public Assignment getParametersAssignment_6_0() { return cParametersAssignment_6_0; }

		//ForkParameter
		public RuleCall getParametersForkParameterParserRuleCall_6_0_0() { return cParametersForkParameterParserRuleCall_6_0_0; }

		//NL
		public RuleCall getNLParserRuleCall_6_1() { return cNLParserRuleCall_6_1; }
	}

	public class ForkParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForkParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameFixedParameterNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cNLParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueValueOrEnumValueOrOperationParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		//ForkParameter:
		//
		//	name=FixedParameterName NL ":" NL value=ValueOrEnumValueOrOperation;
		public ParserRule getRule() { return rule; }

		//name=FixedParameterName NL ":" NL value=ValueOrEnumValueOrOperation
		public Group getGroup() { return cGroup; }

		//name=FixedParameterName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//FixedParameterName
		public RuleCall getNameFixedParameterNameParserRuleCall_0_0() { return cNameFixedParameterNameParserRuleCall_0_0; }

		//NL
		public RuleCall getNLParserRuleCall_1() { return cNLParserRuleCall_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//NL
		public RuleCall getNLParserRuleCall_3() { return cNLParserRuleCall_3; }

		//value=ValueOrEnumValueOrOperation
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//ValueOrEnumValueOrOperation
		public RuleCall getValueValueOrEnumValueOrOperationParserRuleCall_4_0() { return cValueValueOrEnumValueOrOperationParserRuleCall_4_0; }
	}

	public class VariantDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariantDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVariantdefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNLParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cDescriptionAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_4_0_0 = (RuleCall)cDescriptionAssignment_4_0.eContents().get(0);
		private final RuleCall cNLParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		
		//VariantDefinition:
		//
		//	"variantdef" NL name=QualifiedName NL (description=STRING NL)?;
		public ParserRule getRule() { return rule; }

		//"variantdef" NL name=QualifiedName NL (description=STRING NL)?
		public Group getGroup() { return cGroup; }

		//"variantdef"
		public Keyword getVariantdefKeyword_0() { return cVariantdefKeyword_0; }

		//NL
		public RuleCall getNLParserRuleCall_1() { return cNLParserRuleCall_1; }

		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }

		//NL
		public RuleCall getNLParserRuleCall_3() { return cNLParserRuleCall_3; }

		//(description=STRING NL)?
		public Group getGroup_4() { return cGroup_4; }

		//description=STRING
		public Assignment getDescriptionAssignment_4_0() { return cDescriptionAssignment_4_0; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_4_0_0() { return cDescriptionSTRINGTerminalRuleCall_4_0_0; }

		//NL
		public RuleCall getNLParserRuleCall_4_1() { return cNLParserRuleCall_4_1; }
	}

	public class TestDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TestDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestdefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNLParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cUsesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cNLParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cFixtureMethodAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFixtureMethodMethodReferenceParserRuleCall_6_0 = (RuleCall)cFixtureMethodAssignment_6.eContents().get(0);
		private final RuleCall cNLParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//TestDefinition:
		//
		//	"testdef" NL name=QualifiedName NL "uses" NL fixtureMethod=MethodReference NL;
		public ParserRule getRule() { return rule; }

		//"testdef" NL name=QualifiedName NL "uses" NL fixtureMethod=MethodReference NL
		public Group getGroup() { return cGroup; }

		//"testdef"
		public Keyword getTestdefKeyword_0() { return cTestdefKeyword_0; }

		//NL
		public RuleCall getNLParserRuleCall_1() { return cNLParserRuleCall_1; }

		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }

		//NL
		public RuleCall getNLParserRuleCall_3() { return cNLParserRuleCall_3; }

		//"uses"
		public Keyword getUsesKeyword_4() { return cUsesKeyword_4; }

		//NL
		public RuleCall getNLParserRuleCall_5() { return cNLParserRuleCall_5; }

		//fixtureMethod=MethodReference
		public Assignment getFixtureMethodAssignment_6() { return cFixtureMethodAssignment_6; }

		//MethodReference
		public RuleCall getFixtureMethodMethodReferenceParserRuleCall_6_0() { return cFixtureMethodMethodReferenceParserRuleCall_6_0; }

		//NL
		public RuleCall getNLParserRuleCall_7() { return cNLParserRuleCall_7; }
	}

	public class CallDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CallDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCalldefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNLParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cUsesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cNLParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cFixtureMethodAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFixtureMethodMethodReferenceParserRuleCall_6_0 = (RuleCall)cFixtureMethodAssignment_6.eContents().get(0);
		private final RuleCall cNLParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//CallDefinition:
		//
		//	"calldef" NL name=QualifiedName NL "uses" NL fixtureMethod=MethodReference NL;
		public ParserRule getRule() { return rule; }

		//"calldef" NL name=QualifiedName NL "uses" NL fixtureMethod=MethodReference NL
		public Group getGroup() { return cGroup; }

		//"calldef"
		public Keyword getCalldefKeyword_0() { return cCalldefKeyword_0; }

		//NL
		public RuleCall getNLParserRuleCall_1() { return cNLParserRuleCall_1; }

		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }

		//NL
		public RuleCall getNLParserRuleCall_3() { return cNLParserRuleCall_3; }

		//"uses"
		public Keyword getUsesKeyword_4() { return cUsesKeyword_4; }

		//NL
		public RuleCall getNLParserRuleCall_5() { return cNLParserRuleCall_5; }

		//fixtureMethod=MethodReference
		public Assignment getFixtureMethodAssignment_6() { return cFixtureMethodAssignment_6; }

		//MethodReference
		public RuleCall getFixtureMethodMethodReferenceParserRuleCall_6_0() { return cFixtureMethodMethodReferenceParserRuleCall_6_0; }

		//NL
		public RuleCall getNLParserRuleCall_7() { return cNLParserRuleCall_7; }
	}

	public class SuiteDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SuiteDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSuitedefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNLParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cGetsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cNLParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Assignment cParametersAssignment_4_2_0 = (Assignment)cGroup_4_2.eContents().get(0);
		private final RuleCall cParametersVariableEntityParserRuleCall_4_2_0_0 = (RuleCall)cParametersAssignment_4_2_0.eContents().get(0);
		private final RuleCall cNLParserRuleCall_4_2_1 = (RuleCall)cGroup_4_2.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRequiresKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cNLParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Assignment cDependenciesAssignment_5_2_0 = (Assignment)cGroup_5_2.eContents().get(0);
		private final CrossReference cDependenciesSuiteDefinitionCrossReference_5_2_0_0 = (CrossReference)cDependenciesAssignment_5_2_0.eContents().get(0);
		private final RuleCall cDependenciesSuiteDefinitionQualifiedNameParserRuleCall_5_2_0_0_1 = (RuleCall)cDependenciesSuiteDefinitionCrossReference_5_2_0_0.eContents().get(1);
		private final RuleCall cNLParserRuleCall_5_2_1 = (RuleCall)cGroup_5_2.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cConcludedbyKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cNLParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Assignment cFinalizersAssignment_6_2_0 = (Assignment)cGroup_6_2.eContents().get(0);
		private final CrossReference cFinalizersSuiteDefinitionCrossReference_6_2_0_0 = (CrossReference)cFinalizersAssignment_6_2_0.eContents().get(0);
		private final RuleCall cFinalizersSuiteDefinitionQualifiedNameParserRuleCall_6_2_0_0_1 = (RuleCall)cFinalizersSuiteDefinitionCrossReference_6_2_0_0.eContents().get(1);
		private final RuleCall cNLParserRuleCall_6_2_1 = (RuleCall)cGroup_6_2.eContents().get(1);
		private final Keyword cWithKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final RuleCall cNLParserRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Assignment cStatementsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cStatementsSuiteStatementParserRuleCall_9_0 = (RuleCall)cStatementsAssignment_9.eContents().get(0);
		private final Keyword cSuiteendKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final RuleCall cNLParserRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		
		//SuiteDefinition:
		//
		//	"suitedef" NL name=QualifiedName NL ("gets" NL (parameters+=VariableEntity NL)*)? ("requires" NL
		//
		//	(dependencies+=[SuiteDefinition|QualifiedName] NL)*)? ("concludedby" NL (finalizers+=[SuiteDefinition|QualifiedName]
		//
		//	NL)*)? "with" NL statements+=SuiteStatement* "suiteend" NL;
		public ParserRule getRule() { return rule; }

		//"suitedef" NL name=QualifiedName NL ("gets" NL (parameters+=VariableEntity NL)*)? ("requires" NL
		//
		//(dependencies+=[SuiteDefinition|QualifiedName] NL)*)? ("concludedby" NL (finalizers+=[SuiteDefinition|QualifiedName]
		//
		//NL)*)? "with" NL statements+=SuiteStatement* "suiteend" NL
		public Group getGroup() { return cGroup; }

		//"suitedef"
		public Keyword getSuitedefKeyword_0() { return cSuitedefKeyword_0; }

		//NL
		public RuleCall getNLParserRuleCall_1() { return cNLParserRuleCall_1; }

		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }

		//NL
		public RuleCall getNLParserRuleCall_3() { return cNLParserRuleCall_3; }

		//("gets" NL (parameters+=VariableEntity NL)*)?
		public Group getGroup_4() { return cGroup_4; }

		//"gets"
		public Keyword getGetsKeyword_4_0() { return cGetsKeyword_4_0; }

		//NL
		public RuleCall getNLParserRuleCall_4_1() { return cNLParserRuleCall_4_1; }

		//(parameters+=VariableEntity NL)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//parameters+=VariableEntity
		public Assignment getParametersAssignment_4_2_0() { return cParametersAssignment_4_2_0; }

		//VariableEntity
		public RuleCall getParametersVariableEntityParserRuleCall_4_2_0_0() { return cParametersVariableEntityParserRuleCall_4_2_0_0; }

		//NL
		public RuleCall getNLParserRuleCall_4_2_1() { return cNLParserRuleCall_4_2_1; }

		//("requires" NL (dependencies+=[SuiteDefinition|QualifiedName] NL)*)?
		public Group getGroup_5() { return cGroup_5; }

		//"requires"
		public Keyword getRequiresKeyword_5_0() { return cRequiresKeyword_5_0; }

		//NL
		public RuleCall getNLParserRuleCall_5_1() { return cNLParserRuleCall_5_1; }

		//(dependencies+=[SuiteDefinition|QualifiedName] NL)*
		public Group getGroup_5_2() { return cGroup_5_2; }

		//dependencies+=[SuiteDefinition|QualifiedName]
		public Assignment getDependenciesAssignment_5_2_0() { return cDependenciesAssignment_5_2_0; }

		//[SuiteDefinition|QualifiedName]
		public CrossReference getDependenciesSuiteDefinitionCrossReference_5_2_0_0() { return cDependenciesSuiteDefinitionCrossReference_5_2_0_0; }

		//QualifiedName
		public RuleCall getDependenciesSuiteDefinitionQualifiedNameParserRuleCall_5_2_0_0_1() { return cDependenciesSuiteDefinitionQualifiedNameParserRuleCall_5_2_0_0_1; }

		//NL
		public RuleCall getNLParserRuleCall_5_2_1() { return cNLParserRuleCall_5_2_1; }

		//("concludedby" NL (finalizers+=[SuiteDefinition|QualifiedName] NL)*)?
		public Group getGroup_6() { return cGroup_6; }

		//"concludedby"
		public Keyword getConcludedbyKeyword_6_0() { return cConcludedbyKeyword_6_0; }

		//NL
		public RuleCall getNLParserRuleCall_6_1() { return cNLParserRuleCall_6_1; }

		//(finalizers+=[SuiteDefinition|QualifiedName] NL)*
		public Group getGroup_6_2() { return cGroup_6_2; }

		//finalizers+=[SuiteDefinition|QualifiedName]
		public Assignment getFinalizersAssignment_6_2_0() { return cFinalizersAssignment_6_2_0; }

		//[SuiteDefinition|QualifiedName]
		public CrossReference getFinalizersSuiteDefinitionCrossReference_6_2_0_0() { return cFinalizersSuiteDefinitionCrossReference_6_2_0_0; }

		//QualifiedName
		public RuleCall getFinalizersSuiteDefinitionQualifiedNameParserRuleCall_6_2_0_0_1() { return cFinalizersSuiteDefinitionQualifiedNameParserRuleCall_6_2_0_0_1; }

		//NL
		public RuleCall getNLParserRuleCall_6_2_1() { return cNLParserRuleCall_6_2_1; }

		//"with"
		public Keyword getWithKeyword_7() { return cWithKeyword_7; }

		//NL
		public RuleCall getNLParserRuleCall_8() { return cNLParserRuleCall_8; }

		//statements+=SuiteStatement*
		public Assignment getStatementsAssignment_9() { return cStatementsAssignment_9; }

		//SuiteStatement
		public RuleCall getStatementsSuiteStatementParserRuleCall_9_0() { return cStatementsSuiteStatementParserRuleCall_9_0; }

		//"suiteend"
		public Keyword getSuiteendKeyword_10() { return cSuiteendKeyword_10; }

		//NL
		public RuleCall getNLParserRuleCall_11() { return cNLParserRuleCall_11; }
	}

	public class OperationDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationdefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNLParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cUsesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cNLParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cOperationTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cOperationTypeJvmTypeCrossReference_6_0 = (CrossReference)cOperationTypeAssignment_6.eContents().get(0);
		private final RuleCall cOperationTypeJvmTypeQualifiedJavaClassNameParserRuleCall_6_0_1 = (RuleCall)cOperationTypeJvmTypeCrossReference_6_0.eContents().get(1);
		private final RuleCall cNLParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//OperationDefinition:
		//
		//	"operationdef" NL name=QualifiedName NL "uses" NL operationType=[jvmTypes::JvmType|QualifiedJavaClassName] NL;
		public ParserRule getRule() { return rule; }

		//"operationdef" NL name=QualifiedName NL "uses" NL operationType=[jvmTypes::JvmType|QualifiedJavaClassName] NL
		public Group getGroup() { return cGroup; }

		//"operationdef"
		public Keyword getOperationdefKeyword_0() { return cOperationdefKeyword_0; }

		//NL
		public RuleCall getNLParserRuleCall_1() { return cNLParserRuleCall_1; }

		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }

		//NL
		public RuleCall getNLParserRuleCall_3() { return cNLParserRuleCall_3; }

		//"uses"
		public Keyword getUsesKeyword_4() { return cUsesKeyword_4; }

		//NL
		public RuleCall getNLParserRuleCall_5() { return cNLParserRuleCall_5; }

		//operationType=[jvmTypes::JvmType|QualifiedJavaClassName]
		public Assignment getOperationTypeAssignment_6() { return cOperationTypeAssignment_6; }

		//[jvmTypes::JvmType|QualifiedJavaClassName]
		public CrossReference getOperationTypeJvmTypeCrossReference_6_0() { return cOperationTypeJvmTypeCrossReference_6_0; }

		//QualifiedJavaClassName
		public RuleCall getOperationTypeJvmTypeQualifiedJavaClassNameParserRuleCall_6_0_1() { return cOperationTypeJvmTypeQualifiedJavaClassNameParserRuleCall_6_0_1; }

		//NL
		public RuleCall getNLParserRuleCall_7() { return cNLParserRuleCall_7; }
	}

	public class SuiteStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SuiteStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSuiteStatementWithResultParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstantDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVisibleCommentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVisibleDividerParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//SuiteStatement:
		//
		//	SuiteStatementWithResult | VariableDefinition | ConstantDefinition | VisibleComment | VisibleDivider;
		public ParserRule getRule() { return rule; }

		//SuiteStatementWithResult | VariableDefinition | ConstantDefinition | VisibleComment | VisibleDivider
		public Alternatives getAlternatives() { return cAlternatives; }

		//SuiteStatementWithResult
		public RuleCall getSuiteStatementWithResultParserRuleCall_0() { return cSuiteStatementWithResultParserRuleCall_0; }

		//VariableDefinition
		public RuleCall getVariableDefinitionParserRuleCall_1() { return cVariableDefinitionParserRuleCall_1; }

		//ConstantDefinition
		public RuleCall getConstantDefinitionParserRuleCall_2() { return cConstantDefinitionParserRuleCall_2; }

		//VisibleComment
		public RuleCall getVisibleCommentParserRuleCall_3() { return cVisibleCommentParserRuleCall_3; }

		//VisibleDivider
		public RuleCall getVisibleDividerParserRuleCall_4() { return cVisibleDividerParserRuleCall_4; }
	}

	public class SuiteStatementWithResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SuiteStatementWithResult");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSuiteParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTestParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTableTestParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//SuiteStatementWithResult:
		//
		//	Suite | Test | TableTest | Call;
		public ParserRule getRule() { return rule; }

		//Suite | Test | TableTest | Call
		public Alternatives getAlternatives() { return cAlternatives; }

		//Suite
		public RuleCall getSuiteParserRuleCall_0() { return cSuiteParserRuleCall_0; }

		//Test
		public RuleCall getTestParserRuleCall_1() { return cTestParserRuleCall_1; }

		//TableTest
		public RuleCall getTableTestParserRuleCall_2() { return cTableTestParserRuleCall_2; }

		//Call
		public RuleCall getCallParserRuleCall_3() { return cCallParserRuleCall_3; }
	}

	public class VariableDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVariableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameVariableEntityParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNLParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInitiallyKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cNLParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Assignment cInitialValueAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cInitialValueValueParserRuleCall_4_2_0 = (RuleCall)cInitialValueAssignment_4_2.eContents().get(0);
		private final RuleCall cNLParserRuleCall_4_3 = (RuleCall)cGroup_4.eContents().get(3);
		
		//VariableDefinition:
		//
		//	"variable" NL name=VariableEntity NL ("initially" NL initialValue=Value NL)?;
		public ParserRule getRule() { return rule; }

		//"variable" NL name=VariableEntity NL ("initially" NL initialValue=Value NL)?
		public Group getGroup() { return cGroup; }

		//"variable"
		public Keyword getVariableKeyword_0() { return cVariableKeyword_0; }

		//NL
		public RuleCall getNLParserRuleCall_1() { return cNLParserRuleCall_1; }

		//name=VariableEntity
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//VariableEntity
		public RuleCall getNameVariableEntityParserRuleCall_2_0() { return cNameVariableEntityParserRuleCall_2_0; }

		//NL
		public RuleCall getNLParserRuleCall_3() { return cNLParserRuleCall_3; }

		//("initially" NL initialValue=Value NL)?
		public Group getGroup_4() { return cGroup_4; }

		//"initially"
		public Keyword getInitiallyKeyword_4_0() { return cInitiallyKeyword_4_0; }

		//NL
		public RuleCall getNLParserRuleCall_4_1() { return cNLParserRuleCall_4_1; }

		//initialValue=Value
		public Assignment getInitialValueAssignment_4_2() { return cInitialValueAssignment_4_2; }

		//Value
		public RuleCall getInitialValueValueParserRuleCall_4_2_0() { return cInitialValueValueParserRuleCall_4_2_0; }

		//NL
		public RuleCall getNLParserRuleCall_4_3() { return cNLParserRuleCall_4_3; }
	}

	public class ConstantDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameVariableEntityParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNLParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cValueStaticValueParserRuleCall_4_0_0 = (RuleCall)cValueAssignment_4_0.eContents().get(0);
		private final RuleCall cNLParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cVariantValuesAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cVariantValuesVariantValueParserRuleCall_5_0_0 = (RuleCall)cVariantValuesAssignment_5_0.eContents().get(0);
		private final RuleCall cNLParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		
		//ConstantDefinition:
		//
		//	"constant" NL name=VariableEntity NL (value=StaticValue NL)? (variantValues+=VariantValue NL)*;
		public ParserRule getRule() { return rule; }

		//"constant" NL name=VariableEntity NL (value=StaticValue NL)? (variantValues+=VariantValue NL)*
		public Group getGroup() { return cGroup; }

		//"constant"
		public Keyword getConstantKeyword_0() { return cConstantKeyword_0; }

		//NL
		public RuleCall getNLParserRuleCall_1() { return cNLParserRuleCall_1; }

		//name=VariableEntity
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//VariableEntity
		public RuleCall getNameVariableEntityParserRuleCall_2_0() { return cNameVariableEntityParserRuleCall_2_0; }

		//NL
		public RuleCall getNLParserRuleCall_3() { return cNLParserRuleCall_3; }

		//(value=StaticValue NL)?
		public Group getGroup_4() { return cGroup_4; }

		//value=StaticValue
		public Assignment getValueAssignment_4_0() { return cValueAssignment_4_0; }

		//StaticValue
		public RuleCall getValueStaticValueParserRuleCall_4_0_0() { return cValueStaticValueParserRuleCall_4_0_0; }

		//NL
		public RuleCall getNLParserRuleCall_4_1() { return cNLParserRuleCall_4_1; }

		//(variantValues+=VariantValue NL)*
		public Group getGroup_5() { return cGroup_5; }

		//variantValues+=VariantValue
		public Assignment getVariantValuesAssignment_5_0() { return cVariantValuesAssignment_5_0; }

		//VariantValue
		public RuleCall getVariantValuesVariantValueParserRuleCall_5_0_0() { return cVariantValuesVariantValueParserRuleCall_5_0_0; }

		//NL
		public RuleCall getNLParserRuleCall_5_1() { return cNLParserRuleCall_5_1; }
	}

	public class VariantValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariantValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cNamesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cNamesVariantDefinitionCrossReference_2_0_0 = (CrossReference)cNamesAssignment_2_0.eContents().get(0);
		private final RuleCall cNamesVariantDefinitionQualifiedNameParserRuleCall_2_0_0_1 = (RuleCall)cNamesVariantDefinitionCrossReference_2_0_0.eContents().get(1);
		private final RuleCall cNLParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cNLParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueStaticValueParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		
		//VariantValue:
		//
		//	"in" NL (names+=[VariantDefinition|QualifiedName] NL)+ ":" NL value=StaticValue;
		public ParserRule getRule() { return rule; }

		//"in" NL (names+=[VariantDefinition|QualifiedName] NL)+ ":" NL value=StaticValue
		public Group getGroup() { return cGroup; }

		//"in"
		public Keyword getInKeyword_0() { return cInKeyword_0; }

		//NL
		public RuleCall getNLParserRuleCall_1() { return cNLParserRuleCall_1; }

		//(names+=[VariantDefinition|QualifiedName] NL)+
		public Group getGroup_2() { return cGroup_2; }

		//names+=[VariantDefinition|QualifiedName]
		public Assignment getNamesAssignment_2_0() { return cNamesAssignment_2_0; }

		//[VariantDefinition|QualifiedName]
		public CrossReference getNamesVariantDefinitionCrossReference_2_0_0() { return cNamesVariantDefinitionCrossReference_2_0_0; }

		//QualifiedName
		public RuleCall getNamesVariantDefinitionQualifiedNameParserRuleCall_2_0_0_1() { return cNamesVariantDefinitionQualifiedNameParserRuleCall_2_0_0_1; }

		//NL
		public RuleCall getNLParserRuleCall_2_1() { return cNLParserRuleCall_2_1; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//NL
		public RuleCall getNLParserRuleCall_4() { return cNLParserRuleCall_4; }

		//value=StaticValue
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }

		//StaticValue
		public RuleCall getValueStaticValueParserRuleCall_5_0() { return cValueStaticValueParserRuleCall_5_0; }
	}

	public class VariableEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableEntity");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//VariableEntity:
		//
		//	name=QualifiedName;
		public ParserRule getRule() { return rule; }

		//name=QualifiedName
		public Assignment getNameAssignment() { return cNameAssignment; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0() { return cNameQualifiedNameParserRuleCall_0; }
	}

	public class TestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Test");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDefinitionTestDefinitionCrossReference_2_0 = (CrossReference)cDefinitionAssignment_2.eContents().get(0);
		private final RuleCall cDefinitionTestDefinitionQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cDefinitionTestDefinitionCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cNLParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_3_1_0 = (RuleCall)cParametersAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cNLParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cResultsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cResultsNamedResultParserRuleCall_4_1_0 = (RuleCall)cResultsAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final RuleCall cNLParserRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Keyword cEqualsSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final RuleCall cNLParserRuleCall_5_2 = (RuleCall)cGroup_5.eContents().get(2);
		private final Assignment cResultAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cResultValueOrEnumValueOrOperationCollectionParserRuleCall_5_3_0 = (RuleCall)cResultAssignment_5_3.eContents().get(0);
		private final RuleCall cNLParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//Test:
		//
		//	"test" NL definition=[TestDefinition|QualifiedName] (NL parameters+=Parameter)* (NL results+=NamedResult)* (NL "=" NL
		//
		//	result=ValueOrEnumValueOrOperationCollection)? NL;
		public ParserRule getRule() { return rule; }

		//"test" NL definition=[TestDefinition|QualifiedName] (NL parameters+=Parameter)* (NL results+=NamedResult)* (NL "=" NL
		//
		//result=ValueOrEnumValueOrOperationCollection)? NL
		public Group getGroup() { return cGroup; }

		//"test"
		public Keyword getTestKeyword_0() { return cTestKeyword_0; }

		//NL
		public RuleCall getNLParserRuleCall_1() { return cNLParserRuleCall_1; }

		//definition=[TestDefinition|QualifiedName]
		public Assignment getDefinitionAssignment_2() { return cDefinitionAssignment_2; }

		//[TestDefinition|QualifiedName]
		public CrossReference getDefinitionTestDefinitionCrossReference_2_0() { return cDefinitionTestDefinitionCrossReference_2_0; }

		//QualifiedName
		public RuleCall getDefinitionTestDefinitionQualifiedNameParserRuleCall_2_0_1() { return cDefinitionTestDefinitionQualifiedNameParserRuleCall_2_0_1; }

		//(NL parameters+=Parameter)*
		public Group getGroup_3() { return cGroup_3; }

		//NL
		public RuleCall getNLParserRuleCall_3_0() { return cNLParserRuleCall_3_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_3_1() { return cParametersAssignment_3_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_1_0() { return cParametersParameterParserRuleCall_3_1_0; }

		//(NL results+=NamedResult)*
		public Group getGroup_4() { return cGroup_4; }

		//NL
		public RuleCall getNLParserRuleCall_4_0() { return cNLParserRuleCall_4_0; }

		//results+=NamedResult
		public Assignment getResultsAssignment_4_1() { return cResultsAssignment_4_1; }

		//NamedResult
		public RuleCall getResultsNamedResultParserRuleCall_4_1_0() { return cResultsNamedResultParserRuleCall_4_1_0; }

		//(NL "=" NL result=ValueOrEnumValueOrOperationCollection)?
		public Group getGroup_5() { return cGroup_5; }

		//NL
		public RuleCall getNLParserRuleCall_5_0() { return cNLParserRuleCall_5_0; }

		//"="
		public Keyword getEqualsSignKeyword_5_1() { return cEqualsSignKeyword_5_1; }

		//NL
		public RuleCall getNLParserRuleCall_5_2() { return cNLParserRuleCall_5_2; }

		//result=ValueOrEnumValueOrOperationCollection
		public Assignment getResultAssignment_5_3() { return cResultAssignment_5_3; }

		//ValueOrEnumValueOrOperationCollection
		public RuleCall getResultValueOrEnumValueOrOperationCollectionParserRuleCall_5_3_0() { return cResultValueOrEnumValueOrOperationCollectionParserRuleCall_5_3_0; }

		//NL
		public RuleCall getNLParserRuleCall_6() { return cNLParserRuleCall_6; }
	}

	public class TableTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTabletestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDefinitionTestDefinitionCrossReference_2_0 = (CrossReference)cDefinitionAssignment_2.eContents().get(0);
		private final RuleCall cDefinitionTestDefinitionQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cDefinitionTestDefinitionCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cNLParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_3_1_0 = (RuleCall)cParametersAssignment_3_1.eContents().get(0);
		private final RuleCall cNLFORCEDParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cParameterHeadersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParameterHeadersParameterTableHeaderParserRuleCall_5_0 = (RuleCall)cParameterHeadersAssignment_5.eContents().get(0);
		private final Assignment cResultHeadersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cResultHeadersResultTableHeaderParserRuleCall_6_0 = (RuleCall)cResultHeadersAssignment_6.eContents().get(0);
		private final Keyword cVerticalLineKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cDefaultResultColumnAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final Keyword cDefaultResultColumnEqualsSignKeyword_8_0_0 = (Keyword)cDefaultResultColumnAssignment_8_0.eContents().get(0);
		private final Keyword cVerticalLineKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final RuleCall cNLFORCEDParserRuleCall_9_0 = (RuleCall)cGroup_9.eContents().get(0);
		private final Assignment cRowsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cRowsTableTestRowParserRuleCall_9_1_0 = (RuleCall)cRowsAssignment_9_1.eContents().get(0);
		private final RuleCall cNLFORCEDParserRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		
		//TableTest:
		//
		//	"tabletest" NL definition=[TestDefinition|QualifiedName] (NL parameters+=Parameter)* NLFORCED
		//
		//	parameterHeaders+=ParameterTableHeader* resultHeaders+=ResultTableHeader* "|" (defaultResultColumn="=" "|")?
		//
		//	(NLFORCED rows+=TableTestRow)+ NLFORCED;
		public ParserRule getRule() { return rule; }

		//"tabletest" NL definition=[TestDefinition|QualifiedName] (NL parameters+=Parameter)* NLFORCED
		//
		//parameterHeaders+=ParameterTableHeader* resultHeaders+=ResultTableHeader* "|" (defaultResultColumn="=" "|")? (NLFORCED
		//
		//rows+=TableTestRow)+ NLFORCED
		public Group getGroup() { return cGroup; }

		//"tabletest"
		public Keyword getTabletestKeyword_0() { return cTabletestKeyword_0; }

		//NL
		public RuleCall getNLParserRuleCall_1() { return cNLParserRuleCall_1; }

		//definition=[TestDefinition|QualifiedName]
		public Assignment getDefinitionAssignment_2() { return cDefinitionAssignment_2; }

		//[TestDefinition|QualifiedName]
		public CrossReference getDefinitionTestDefinitionCrossReference_2_0() { return cDefinitionTestDefinitionCrossReference_2_0; }

		//QualifiedName
		public RuleCall getDefinitionTestDefinitionQualifiedNameParserRuleCall_2_0_1() { return cDefinitionTestDefinitionQualifiedNameParserRuleCall_2_0_1; }

		//(NL parameters+=Parameter)*
		public Group getGroup_3() { return cGroup_3; }

		//NL
		public RuleCall getNLParserRuleCall_3_0() { return cNLParserRuleCall_3_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_3_1() { return cParametersAssignment_3_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_1_0() { return cParametersParameterParserRuleCall_3_1_0; }

		//NLFORCED
		public RuleCall getNLFORCEDParserRuleCall_4() { return cNLFORCEDParserRuleCall_4; }

		//parameterHeaders+=ParameterTableHeader*
		public Assignment getParameterHeadersAssignment_5() { return cParameterHeadersAssignment_5; }

		//ParameterTableHeader
		public RuleCall getParameterHeadersParameterTableHeaderParserRuleCall_5_0() { return cParameterHeadersParameterTableHeaderParserRuleCall_5_0; }

		//resultHeaders+=ResultTableHeader*
		public Assignment getResultHeadersAssignment_6() { return cResultHeadersAssignment_6; }

		//ResultTableHeader
		public RuleCall getResultHeadersResultTableHeaderParserRuleCall_6_0() { return cResultHeadersResultTableHeaderParserRuleCall_6_0; }

		//"|"
		public Keyword getVerticalLineKeyword_7() { return cVerticalLineKeyword_7; }

		//(defaultResultColumn="=" "|")?
		public Group getGroup_8() { return cGroup_8; }

		//defaultResultColumn="="
		public Assignment getDefaultResultColumnAssignment_8_0() { return cDefaultResultColumnAssignment_8_0; }

		//"="
		public Keyword getDefaultResultColumnEqualsSignKeyword_8_0_0() { return cDefaultResultColumnEqualsSignKeyword_8_0_0; }

		//"|"
		public Keyword getVerticalLineKeyword_8_1() { return cVerticalLineKeyword_8_1; }

		//(NLFORCED rows+=TableTestRow)+
		public Group getGroup_9() { return cGroup_9; }

		//NLFORCED
		public RuleCall getNLFORCEDParserRuleCall_9_0() { return cNLFORCEDParserRuleCall_9_0; }

		//rows+=TableTestRow
		public Assignment getRowsAssignment_9_1() { return cRowsAssignment_9_1; }

		//TableTestRow
		public RuleCall getRowsTableTestRowParserRuleCall_9_1_0() { return cRowsTableTestRowParserRuleCall_9_1_0; }

		//NLFORCED
		public RuleCall getNLFORCEDParserRuleCall_10() { return cNLFORCEDParserRuleCall_10; }
	}

	public class TableTestRowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableTestRow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTableTestRowAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesParameterTableValueParserRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		
		//TableTestRow:
		//
		//	{TableTestRow} values+=ParameterTableValue+;
		public ParserRule getRule() { return rule; }

		//{TableTestRow} values+=ParameterTableValue+
		public Group getGroup() { return cGroup; }

		//{TableTestRow}
		public Action getTableTestRowAction_0() { return cTableTestRowAction_0; }

		//values+=ParameterTableValue+
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }

		//ParameterTableValue
		public RuleCall getValuesParameterTableValueParserRuleCall_1_0() { return cValuesParameterTableValueParserRuleCall_1_0; }
	}

	public class ParameterTableHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterTableHeader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameParameterNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParameterTableHeader:
		//
		//	"|" name=ParameterName "|"?;
		public ParserRule getRule() { return rule; }

		//"|" name=ParameterName "|"?
		public Group getGroup() { return cGroup; }

		//"|"
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }

		//name=ParameterName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ParameterName
		public RuleCall getNameParameterNameParserRuleCall_1_0() { return cNameParameterNameParserRuleCall_1_0; }

		//"|"?
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }
	}

	public class ResultTableHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResultTableHeader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameResultNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cVerticalLineKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ResultTableHeader:
		//
		//	"|" name=ResultName "=" "|"?;
		public ParserRule getRule() { return rule; }

		//"|" name=ResultName "=" "|"?
		public Group getGroup() { return cGroup; }

		//"|"
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }

		//name=ResultName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ResultName
		public RuleCall getNameResultNameParserRuleCall_1_0() { return cNameResultNameParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//"|"?
		public Keyword getVerticalLineKeyword_3() { return cVerticalLineKeyword_3; }
	}

	public class ParameterTableValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterTableValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueValueOrEnumValueOrOperationCollectionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParameterTableValue:
		//
		//	"|" value=ValueOrEnumValueOrOperationCollection "|"?;
		public ParserRule getRule() { return rule; }

		//"|" value=ValueOrEnumValueOrOperationCollection "|"?
		public Group getGroup() { return cGroup; }

		//"|"
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }

		//value=ValueOrEnumValueOrOperationCollection
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//ValueOrEnumValueOrOperationCollection
		public RuleCall getValueValueOrEnumValueOrOperationCollectionParserRuleCall_1_0() { return cValueValueOrEnumValueOrOperationCollectionParserRuleCall_1_0; }

		//"|"?
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }
	}

	public class NamedResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedResult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameResultNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cNLParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueValueOrEnumValueOrOperationCollectionParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		//NamedResult:
		//
		//	name=ResultName NL "=" NL value=ValueOrEnumValueOrOperationCollection;
		public ParserRule getRule() { return rule; }

		//name=ResultName NL "=" NL value=ValueOrEnumValueOrOperationCollection
		public Group getGroup() { return cGroup; }

		//name=ResultName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ResultName
		public RuleCall getNameResultNameParserRuleCall_0_0() { return cNameResultNameParserRuleCall_0_0; }

		//NL
		public RuleCall getNLParserRuleCall_1() { return cNLParserRuleCall_1; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//NL
		public RuleCall getNLParserRuleCall_3() { return cNLParserRuleCall_3; }

		//value=ValueOrEnumValueOrOperationCollection
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//ValueOrEnumValueOrOperationCollection
		public RuleCall getValueValueOrEnumValueOrOperationCollectionParserRuleCall_4_0() { return cValueValueOrEnumValueOrOperationCollectionParserRuleCall_4_0; }
	}

	public class ResultNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResultName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFixedResultNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArbitraryParameterOrResultNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ResultName:
		//
		//	FixedResultName | ArbitraryParameterOrResultName;
		public ParserRule getRule() { return rule; }

		//FixedResultName | ArbitraryParameterOrResultName
		public Alternatives getAlternatives() { return cAlternatives; }

		//FixedResultName
		public RuleCall getFixedResultNameParserRuleCall_0() { return cFixedResultNameParserRuleCall_0; }

		//ArbitraryParameterOrResultName
		public RuleCall getArbitraryParameterOrResultNameParserRuleCall_1() { return cArbitraryParameterOrResultNameParserRuleCall_1; }
	}

	public class FixedResultNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FixedResultName");
		private final Assignment cFieldAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cFieldJvmFieldCrossReference_0 = (CrossReference)cFieldAssignment.eContents().get(0);
		private final RuleCall cFieldJvmFieldIDTerminalRuleCall_0_1 = (RuleCall)cFieldJvmFieldCrossReference_0.eContents().get(1);
		
		//FixedResultName:
		//
		//	field=[jvmTypes::JvmField];
		public ParserRule getRule() { return rule; }

		//field=[jvmTypes::JvmField]
		public Assignment getFieldAssignment() { return cFieldAssignment; }

		//[jvmTypes::JvmField]
		public CrossReference getFieldJvmFieldCrossReference_0() { return cFieldJvmFieldCrossReference_0; }

		//ID
		public RuleCall getFieldJvmFieldIDTerminalRuleCall_0_1() { return cFieldJvmFieldIDTerminalRuleCall_0_1; }
	}

	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Call");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cMultiplierAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cMultiplierExecutionMultiplierParserRuleCall_2_0_0 = (RuleCall)cMultiplierAssignment_2_0.eContents().get(0);
		private final RuleCall cNLParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Assignment cDefinitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cDefinitionCallDefinitionCrossReference_3_0 = (CrossReference)cDefinitionAssignment_3.eContents().get(0);
		private final RuleCall cDefinitionCallDefinitionQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cDefinitionCallDefinitionCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cNLParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_4_1_0 = (RuleCall)cParametersAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final RuleCall cNLParserRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Assignment cResultsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cResultsNamedCallResultParserRuleCall_5_1_0 = (RuleCall)cResultsAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final RuleCall cNLParserRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final RuleCall cNLParserRuleCall_6_2 = (RuleCall)cGroup_6.eContents().get(2);
		private final Assignment cResultAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cResultVariableParserRuleCall_6_3_0 = (RuleCall)cResultAssignment_6_3.eContents().get(0);
		private final RuleCall cNLParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//Call:
		//
		//	"call" NL (multiplier=ExecutionMultiplier NL)? definition=[CallDefinition|QualifiedName] (NL parameters+=Parameter)*
		//
		//	(NL results+=NamedCallResult)* (NL "->" NL result=Variable)? NL;
		public ParserRule getRule() { return rule; }

		//"call" NL (multiplier=ExecutionMultiplier NL)? definition=[CallDefinition|QualifiedName] (NL parameters+=Parameter)* (NL
		//
		//results+=NamedCallResult)* (NL "->" NL result=Variable)? NL
		public Group getGroup() { return cGroup; }

		//"call"
		public Keyword getCallKeyword_0() { return cCallKeyword_0; }

		//NL
		public RuleCall getNLParserRuleCall_1() { return cNLParserRuleCall_1; }

		//(multiplier=ExecutionMultiplier NL)?
		public Group getGroup_2() { return cGroup_2; }

		//multiplier=ExecutionMultiplier
		public Assignment getMultiplierAssignment_2_0() { return cMultiplierAssignment_2_0; }

		//ExecutionMultiplier
		public RuleCall getMultiplierExecutionMultiplierParserRuleCall_2_0_0() { return cMultiplierExecutionMultiplierParserRuleCall_2_0_0; }

		//NL
		public RuleCall getNLParserRuleCall_2_1() { return cNLParserRuleCall_2_1; }

		//definition=[CallDefinition|QualifiedName]
		public Assignment getDefinitionAssignment_3() { return cDefinitionAssignment_3; }

		//[CallDefinition|QualifiedName]
		public CrossReference getDefinitionCallDefinitionCrossReference_3_0() { return cDefinitionCallDefinitionCrossReference_3_0; }

		//QualifiedName
		public RuleCall getDefinitionCallDefinitionQualifiedNameParserRuleCall_3_0_1() { return cDefinitionCallDefinitionQualifiedNameParserRuleCall_3_0_1; }

		//(NL parameters+=Parameter)*
		public Group getGroup_4() { return cGroup_4; }

		//NL
		public RuleCall getNLParserRuleCall_4_0() { return cNLParserRuleCall_4_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_4_1() { return cParametersAssignment_4_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_1_0() { return cParametersParameterParserRuleCall_4_1_0; }

		//(NL results+=NamedCallResult)*
		public Group getGroup_5() { return cGroup_5; }

		//NL
		public RuleCall getNLParserRuleCall_5_0() { return cNLParserRuleCall_5_0; }

		//results+=NamedCallResult
		public Assignment getResultsAssignment_5_1() { return cResultsAssignment_5_1; }

		//NamedCallResult
		public RuleCall getResultsNamedCallResultParserRuleCall_5_1_0() { return cResultsNamedCallResultParserRuleCall_5_1_0; }

		//(NL "->" NL result=Variable)?
		public Group getGroup_6() { return cGroup_6; }

		//NL
		public RuleCall getNLParserRuleCall_6_0() { return cNLParserRuleCall_6_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_6_1() { return cHyphenMinusGreaterThanSignKeyword_6_1; }

		//NL
		public RuleCall getNLParserRuleCall_6_2() { return cNLParserRuleCall_6_2; }

		//result=Variable
		public Assignment getResultAssignment_6_3() { return cResultAssignment_6_3; }

		//Variable
		public RuleCall getResultVariableParserRuleCall_6_3_0() { return cResultVariableParserRuleCall_6_3_0; }

		//NL
		public RuleCall getNLParserRuleCall_7() { return cNLParserRuleCall_7; }
	}

	public class NamedCallResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedCallResult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameResultNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cNLParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTargetVariableParserRuleCall_4_0 = (RuleCall)cTargetAssignment_4.eContents().get(0);
		
		//NamedCallResult:
		//
		//	name=ResultName NL "->" NL target=Variable;
		public ParserRule getRule() { return rule; }

		//name=ResultName NL "->" NL target=Variable
		public Group getGroup() { return cGroup; }

		//name=ResultName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ResultName
		public RuleCall getNameResultNameParserRuleCall_0_0() { return cNameResultNameParserRuleCall_0_0; }

		//NL
		public RuleCall getNLParserRuleCall_1() { return cNLParserRuleCall_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }

		//NL
		public RuleCall getNLParserRuleCall_3() { return cNLParserRuleCall_3; }

		//target=Variable
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }

		//Variable
		public RuleCall getTargetVariableParserRuleCall_4_0() { return cTargetVariableParserRuleCall_4_0; }
	}

	public class SuiteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Suite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSuiteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cMultiplierAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cMultiplierExecutionMultiplierParserRuleCall_2_0_0 = (RuleCall)cMultiplierAssignment_2_0.eContents().get(0);
		private final RuleCall cNLParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Assignment cDefinitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cDefinitionSuiteDefinitionCrossReference_3_0 = (CrossReference)cDefinitionAssignment_3.eContents().get(0);
		private final RuleCall cDefinitionSuiteDefinitionQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cDefinitionSuiteDefinitionCrossReference_3_0.eContents().get(1);
		private final RuleCall cNLParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParametersAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParametersSuiteParameterParserRuleCall_5_0_0 = (RuleCall)cParametersAssignment_5_0.eContents().get(0);
		private final RuleCall cNLParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cOnKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cNLParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Assignment cForkAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final CrossReference cForkForkDefinitionCrossReference_6_2_0 = (CrossReference)cForkAssignment_6_2.eContents().get(0);
		private final RuleCall cForkForkDefinitionQualifiedNameParserRuleCall_6_2_0_1 = (RuleCall)cForkForkDefinitionCrossReference_6_2_0.eContents().get(1);
		private final RuleCall cNLParserRuleCall_6_3 = (RuleCall)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cInKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final RuleCall cNLParserRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Assignment cVariantsAssignment_7_2_0 = (Assignment)cGroup_7_2.eContents().get(0);
		private final CrossReference cVariantsVariantDefinitionCrossReference_7_2_0_0 = (CrossReference)cVariantsAssignment_7_2_0.eContents().get(0);
		private final RuleCall cVariantsVariantDefinitionQualifiedNameParserRuleCall_7_2_0_0_1 = (RuleCall)cVariantsVariantDefinitionCrossReference_7_2_0_0.eContents().get(1);
		private final RuleCall cNLParserRuleCall_7_2_1 = (RuleCall)cGroup_7_2.eContents().get(1);
		
		//Suite:
		//
		//	"suite" NL (multiplier=ExecutionMultiplier NL)? definition=[SuiteDefinition|QualifiedName] NL
		//
		//	(parameters+=SuiteParameter NL)* ("on" NL fork=[ForkDefinition|QualifiedName] NL)? ("in" NL
		//
		//	(variants+=[VariantDefinition|QualifiedName] NL)+)?;
		public ParserRule getRule() { return rule; }

		//"suite" NL (multiplier=ExecutionMultiplier NL)? definition=[SuiteDefinition|QualifiedName] NL
		//
		//(parameters+=SuiteParameter NL)* ("on" NL fork=[ForkDefinition|QualifiedName] NL)? ("in" NL
		//
		//(variants+=[VariantDefinition|QualifiedName] NL)+)?
		public Group getGroup() { return cGroup; }

		//"suite"
		public Keyword getSuiteKeyword_0() { return cSuiteKeyword_0; }

		//NL
		public RuleCall getNLParserRuleCall_1() { return cNLParserRuleCall_1; }

		//(multiplier=ExecutionMultiplier NL)?
		public Group getGroup_2() { return cGroup_2; }

		//multiplier=ExecutionMultiplier
		public Assignment getMultiplierAssignment_2_0() { return cMultiplierAssignment_2_0; }

		//ExecutionMultiplier
		public RuleCall getMultiplierExecutionMultiplierParserRuleCall_2_0_0() { return cMultiplierExecutionMultiplierParserRuleCall_2_0_0; }

		//NL
		public RuleCall getNLParserRuleCall_2_1() { return cNLParserRuleCall_2_1; }

		//definition=[SuiteDefinition|QualifiedName]
		public Assignment getDefinitionAssignment_3() { return cDefinitionAssignment_3; }

		//[SuiteDefinition|QualifiedName]
		public CrossReference getDefinitionSuiteDefinitionCrossReference_3_0() { return cDefinitionSuiteDefinitionCrossReference_3_0; }

		//QualifiedName
		public RuleCall getDefinitionSuiteDefinitionQualifiedNameParserRuleCall_3_0_1() { return cDefinitionSuiteDefinitionQualifiedNameParserRuleCall_3_0_1; }

		//NL
		public RuleCall getNLParserRuleCall_4() { return cNLParserRuleCall_4; }

		//(parameters+=SuiteParameter NL)*
		public Group getGroup_5() { return cGroup_5; }

		//parameters+=SuiteParameter
		public Assignment getParametersAssignment_5_0() { return cParametersAssignment_5_0; }

		//SuiteParameter
		public RuleCall getParametersSuiteParameterParserRuleCall_5_0_0() { return cParametersSuiteParameterParserRuleCall_5_0_0; }

		//NL
		public RuleCall getNLParserRuleCall_5_1() { return cNLParserRuleCall_5_1; }

		//("on" NL fork=[ForkDefinition|QualifiedName] NL)?
		public Group getGroup_6() { return cGroup_6; }

		//"on"
		public Keyword getOnKeyword_6_0() { return cOnKeyword_6_0; }

		//NL
		public RuleCall getNLParserRuleCall_6_1() { return cNLParserRuleCall_6_1; }

		//fork=[ForkDefinition|QualifiedName]
		public Assignment getForkAssignment_6_2() { return cForkAssignment_6_2; }

		//[ForkDefinition|QualifiedName]
		public CrossReference getForkForkDefinitionCrossReference_6_2_0() { return cForkForkDefinitionCrossReference_6_2_0; }

		//QualifiedName
		public RuleCall getForkForkDefinitionQualifiedNameParserRuleCall_6_2_0_1() { return cForkForkDefinitionQualifiedNameParserRuleCall_6_2_0_1; }

		//NL
		public RuleCall getNLParserRuleCall_6_3() { return cNLParserRuleCall_6_3; }

		//("in" NL (variants+=[VariantDefinition|QualifiedName] NL)+)?
		public Group getGroup_7() { return cGroup_7; }

		//"in"
		public Keyword getInKeyword_7_0() { return cInKeyword_7_0; }

		//NL
		public RuleCall getNLParserRuleCall_7_1() { return cNLParserRuleCall_7_1; }

		//(variants+=[VariantDefinition|QualifiedName] NL)+
		public Group getGroup_7_2() { return cGroup_7_2; }

		//variants+=[VariantDefinition|QualifiedName]
		public Assignment getVariantsAssignment_7_2_0() { return cVariantsAssignment_7_2_0; }

		//[VariantDefinition|QualifiedName]
		public CrossReference getVariantsVariantDefinitionCrossReference_7_2_0_0() { return cVariantsVariantDefinitionCrossReference_7_2_0_0; }

		//QualifiedName
		public RuleCall getVariantsVariantDefinitionQualifiedNameParserRuleCall_7_2_0_0_1() { return cVariantsVariantDefinitionQualifiedNameParserRuleCall_7_2_0_0_1; }

		//NL
		public RuleCall getNLParserRuleCall_7_2_1() { return cNLParserRuleCall_7_2_1; }
	}

	public class SuiteParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SuiteParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameVariableEntityCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameVariableEntityQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cNameVariableEntityCrossReference_0_0.eContents().get(1);
		private final RuleCall cNLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cNLParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueValueParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		//SuiteParameter:
		//
		//	name=[VariableEntity|QualifiedName] NL ":" NL value=Value;
		public ParserRule getRule() { return rule; }

		//name=[VariableEntity|QualifiedName] NL ":" NL value=Value
		public Group getGroup() { return cGroup; }

		//name=[VariableEntity|QualifiedName]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//[VariableEntity|QualifiedName]
		public CrossReference getNameVariableEntityCrossReference_0_0() { return cNameVariableEntityCrossReference_0_0; }

		//QualifiedName
		public RuleCall getNameVariableEntityQualifiedNameParserRuleCall_0_0_1() { return cNameVariableEntityQualifiedNameParserRuleCall_0_0_1; }

		//NL
		public RuleCall getNLParserRuleCall_1() { return cNLParserRuleCall_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//NL
		public RuleCall getNLParserRuleCall_3() { return cNLParserRuleCall_3; }

		//value=Value
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//Value
		public RuleCall getValueValueParserRuleCall_4_0() { return cValueValueParserRuleCall_4_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameParameterNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cNLParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueValueOrEnumValueOrOperationCollectionParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		//Parameter:
		//
		//	name=ParameterName NL ":" NL value=ValueOrEnumValueOrOperationCollection;
		public ParserRule getRule() { return rule; }

		//name=ParameterName NL ":" NL value=ValueOrEnumValueOrOperationCollection
		public Group getGroup() { return cGroup; }

		//name=ParameterName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ParameterName
		public RuleCall getNameParameterNameParserRuleCall_0_0() { return cNameParameterNameParserRuleCall_0_0; }

		//NL
		public RuleCall getNLParserRuleCall_1() { return cNLParserRuleCall_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//NL
		public RuleCall getNLParserRuleCall_3() { return cNLParserRuleCall_3; }

		//value=ValueOrEnumValueOrOperationCollection
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//ValueOrEnumValueOrOperationCollection
		public RuleCall getValueValueOrEnumValueOrOperationCollectionParserRuleCall_4_0() { return cValueValueOrEnumValueOrOperationCollectionParserRuleCall_4_0; }
	}

	public class ParameterNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFixedParameterNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArbitraryParameterOrResultNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ParameterName:
		//
		//	FixedParameterName | ArbitraryParameterOrResultName;
		public ParserRule getRule() { return rule; }

		//FixedParameterName | ArbitraryParameterOrResultName
		public Alternatives getAlternatives() { return cAlternatives; }

		//FixedParameterName
		public RuleCall getFixedParameterNameParserRuleCall_0() { return cFixedParameterNameParserRuleCall_0; }

		//ArbitraryParameterOrResultName
		public RuleCall getArbitraryParameterOrResultNameParserRuleCall_1() { return cArbitraryParameterOrResultNameParserRuleCall_1; }
	}

	public class FixedParameterNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FixedParameterName");
		private final Assignment cAnnotationAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cAnnotationJvmAnnotationReferenceCrossReference_0 = (CrossReference)cAnnotationAssignment.eContents().get(0);
		private final RuleCall cAnnotationJvmAnnotationReferenceIDTerminalRuleCall_0_1 = (RuleCall)cAnnotationJvmAnnotationReferenceCrossReference_0.eContents().get(1);
		
		//FixedParameterName:
		//
		//	annotation=[jvmTypes::JvmAnnotationReference];
		public ParserRule getRule() { return rule; }

		//annotation=[jvmTypes::JvmAnnotationReference]
		public Assignment getAnnotationAssignment() { return cAnnotationAssignment; }

		//[jvmTypes::JvmAnnotationReference]
		public CrossReference getAnnotationJvmAnnotationReferenceCrossReference_0() { return cAnnotationJvmAnnotationReferenceCrossReference_0; }

		//ID
		public RuleCall getAnnotationJvmAnnotationReferenceIDTerminalRuleCall_0_1() { return cAnnotationJvmAnnotationReferenceIDTerminalRuleCall_0_1; }
	}

	public class ArbitraryParameterOrResultNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArbitraryParameterOrResultName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		
		//ArbitraryParameterOrResultName:
		//
		//	"+" identifier=ID;
		public ParserRule getRule() { return rule; }

		//"+" identifier=ID
		public Group getGroup() { return cGroup; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//identifier=ID
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_0() { return cIdentifierIDTerminalRuleCall_1_0; }
	}

	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStandardOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCustomOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Operation:
		//
		//	StandardOperation | CustomOperation;
		public ParserRule getRule() { return rule; }

		//StandardOperation | CustomOperation
		public Alternatives getAlternatives() { return cAlternatives; }

		//StandardOperation
		public RuleCall getStandardOperationParserRuleCall_0() { return cStandardOperationParserRuleCall_0; }

		//CustomOperation
		public RuleCall getCustomOperationParserRuleCall_1() { return cCustomOperationParserRuleCall_1; }
	}

	public class StandardOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StandardOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cFirstOperandAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFirstOperandValueOrEnumValueOrOperationParserRuleCall_2_0 = (RuleCall)cFirstOperandAssignment_2.eContents().get(0);
		private final RuleCall cNLParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cOperatorsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Alternatives cOperatorsAlternatives_4_0_0 = (Alternatives)cOperatorsAssignment_4_0.eContents().get(0);
		private final Keyword cOperatorsPlusSignKeyword_4_0_0_0 = (Keyword)cOperatorsAlternatives_4_0_0.eContents().get(0);
		private final Keyword cOperatorsHyphenMinusKeyword_4_0_0_1 = (Keyword)cOperatorsAlternatives_4_0_0.eContents().get(1);
		private final Keyword cOperatorsAsteriskKeyword_4_0_0_2 = (Keyword)cOperatorsAlternatives_4_0_0.eContents().get(2);
		private final Keyword cOperatorsSolidusKeyword_4_0_0_3 = (Keyword)cOperatorsAlternatives_4_0_0.eContents().get(3);
		private final Keyword cOperatorsPercentSignKeyword_4_0_0_4 = (Keyword)cOperatorsAlternatives_4_0_0.eContents().get(4);
		private final Keyword cOperatorsFullStopFullStopKeyword_4_0_0_5 = (Keyword)cOperatorsAlternatives_4_0_0.eContents().get(5);
		private final RuleCall cNLParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Assignment cMoreOperandsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cMoreOperandsValueOrEnumValueOrOperationParserRuleCall_4_2_0 = (RuleCall)cMoreOperandsAssignment_4_2.eContents().get(0);
		private final RuleCall cNLParserRuleCall_4_3 = (RuleCall)cGroup_4.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//StandardOperation:
		//
		//	"(" NL firstOperand=ValueOrEnumValueOrOperation NL (operators+=("+" | "-" | "*" | "/" | "%" | "..") NL
		//
		//	moreOperands+=ValueOrEnumValueOrOperation NL)+ ")";
		public ParserRule getRule() { return rule; }

		//"(" NL firstOperand=ValueOrEnumValueOrOperation NL (operators+=("+" | "-" | "*" | "/" | "%" | "..") NL
		//
		//moreOperands+=ValueOrEnumValueOrOperation NL)+ ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//NL
		public RuleCall getNLParserRuleCall_1() { return cNLParserRuleCall_1; }

		//firstOperand=ValueOrEnumValueOrOperation
		public Assignment getFirstOperandAssignment_2() { return cFirstOperandAssignment_2; }

		//ValueOrEnumValueOrOperation
		public RuleCall getFirstOperandValueOrEnumValueOrOperationParserRuleCall_2_0() { return cFirstOperandValueOrEnumValueOrOperationParserRuleCall_2_0; }

		//NL
		public RuleCall getNLParserRuleCall_3() { return cNLParserRuleCall_3; }

		//(operators+=("+" | "-" | "*" | "/" | "%" | "..") NL moreOperands+=ValueOrEnumValueOrOperation NL)+
		public Group getGroup_4() { return cGroup_4; }

		//operators+=("+" | "-" | "*" | "/" | "%" | "..")
		public Assignment getOperatorsAssignment_4_0() { return cOperatorsAssignment_4_0; }

		//"+" | "-" | "*" | "/" | "%" | ".."
		public Alternatives getOperatorsAlternatives_4_0_0() { return cOperatorsAlternatives_4_0_0; }

		//"+"
		public Keyword getOperatorsPlusSignKeyword_4_0_0_0() { return cOperatorsPlusSignKeyword_4_0_0_0; }

		//"-"
		public Keyword getOperatorsHyphenMinusKeyword_4_0_0_1() { return cOperatorsHyphenMinusKeyword_4_0_0_1; }

		//"*"
		public Keyword getOperatorsAsteriskKeyword_4_0_0_2() { return cOperatorsAsteriskKeyword_4_0_0_2; }

		//"/"
		public Keyword getOperatorsSolidusKeyword_4_0_0_3() { return cOperatorsSolidusKeyword_4_0_0_3; }

		//"%"
		public Keyword getOperatorsPercentSignKeyword_4_0_0_4() { return cOperatorsPercentSignKeyword_4_0_0_4; }

		//".."
		public Keyword getOperatorsFullStopFullStopKeyword_4_0_0_5() { return cOperatorsFullStopFullStopKeyword_4_0_0_5; }

		//NL
		public RuleCall getNLParserRuleCall_4_1() { return cNLParserRuleCall_4_1; }

		//moreOperands+=ValueOrEnumValueOrOperation
		public Assignment getMoreOperandsAssignment_4_2() { return cMoreOperandsAssignment_4_2; }

		//ValueOrEnumValueOrOperation
		public RuleCall getMoreOperandsValueOrEnumValueOrOperationParserRuleCall_4_2_0() { return cMoreOperandsValueOrEnumValueOrOperationParserRuleCall_4_2_0; }

		//NL
		public RuleCall getNLParserRuleCall_4_3() { return cNLParserRuleCall_4_3; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class CustomOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CustomOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cPrefixOperandAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cPrefixOperandValueOrEnumValueOrOperationCollectionParserRuleCall_2_0_0 = (RuleCall)cPrefixOperandAssignment_2_0.eContents().get(0);
		private final RuleCall cNLParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Assignment cDefinitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cDefinitionOperationDefinitionCrossReference_3_0 = (CrossReference)cDefinitionAssignment_3.eContents().get(0);
		private final RuleCall cDefinitionOperationDefinitionQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cDefinitionOperationDefinitionCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cNLParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Keyword cWithKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cPostfixOperandAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cPostfixOperandValueOrEnumValueOrOperationCollectionParserRuleCall_4_2_0 = (RuleCall)cPostfixOperandAssignment_4_2.eContents().get(0);
		private final RuleCall cNLParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CustomOperation:
		//
		//	"[" NL (prefixOperand=ValueOrEnumValueOrOperationCollection NL)? definition=[OperationDefinition|QualifiedName] (NL
		//
		//	"with" postfixOperand=ValueOrEnumValueOrOperationCollection)? NL "]";
		public ParserRule getRule() { return rule; }

		//"[" NL (prefixOperand=ValueOrEnumValueOrOperationCollection NL)? definition=[OperationDefinition|QualifiedName] (NL
		//
		//"with" postfixOperand=ValueOrEnumValueOrOperationCollection)? NL "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//NL
		public RuleCall getNLParserRuleCall_1() { return cNLParserRuleCall_1; }

		//(prefixOperand=ValueOrEnumValueOrOperationCollection NL)?
		public Group getGroup_2() { return cGroup_2; }

		//prefixOperand=ValueOrEnumValueOrOperationCollection
		public Assignment getPrefixOperandAssignment_2_0() { return cPrefixOperandAssignment_2_0; }

		//ValueOrEnumValueOrOperationCollection
		public RuleCall getPrefixOperandValueOrEnumValueOrOperationCollectionParserRuleCall_2_0_0() { return cPrefixOperandValueOrEnumValueOrOperationCollectionParserRuleCall_2_0_0; }

		//NL
		public RuleCall getNLParserRuleCall_2_1() { return cNLParserRuleCall_2_1; }

		//definition=[OperationDefinition|QualifiedName]
		public Assignment getDefinitionAssignment_3() { return cDefinitionAssignment_3; }

		//[OperationDefinition|QualifiedName]
		public CrossReference getDefinitionOperationDefinitionCrossReference_3_0() { return cDefinitionOperationDefinitionCrossReference_3_0; }

		//QualifiedName
		public RuleCall getDefinitionOperationDefinitionQualifiedNameParserRuleCall_3_0_1() { return cDefinitionOperationDefinitionQualifiedNameParserRuleCall_3_0_1; }

		//(NL "with" postfixOperand=ValueOrEnumValueOrOperationCollection)?
		public Group getGroup_4() { return cGroup_4; }

		//NL
		public RuleCall getNLParserRuleCall_4_0() { return cNLParserRuleCall_4_0; }

		//"with"
		public Keyword getWithKeyword_4_1() { return cWithKeyword_4_1; }

		//postfixOperand=ValueOrEnumValueOrOperationCollection
		public Assignment getPostfixOperandAssignment_4_2() { return cPostfixOperandAssignment_4_2; }

		//ValueOrEnumValueOrOperationCollection
		public RuleCall getPostfixOperandValueOrEnumValueOrOperationCollectionParserRuleCall_4_2_0() { return cPostfixOperandValueOrEnumValueOrOperationCollectionParserRuleCall_4_2_0; }

		//NL
		public RuleCall getNLParserRuleCall_5() { return cNLParserRuleCall_5; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}

	public class ValueOrEnumValueOrOperationCollectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueOrEnumValueOrOperationCollection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueValueOrEnumValueOrOperationParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cNLParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cNLParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cMoreValuesAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cMoreValuesValueOrEnumValueOrOperationParserRuleCall_1_3_0 = (RuleCall)cMoreValuesAssignment_1_3.eContents().get(0);
		
		//ValueOrEnumValueOrOperationCollection:
		//
		//	value=ValueOrEnumValueOrOperation (NL "," NL moreValues+=ValueOrEnumValueOrOperation)*;
		public ParserRule getRule() { return rule; }

		//value=ValueOrEnumValueOrOperation (NL "," NL moreValues+=ValueOrEnumValueOrOperation)*
		public Group getGroup() { return cGroup; }

		//value=ValueOrEnumValueOrOperation
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//ValueOrEnumValueOrOperation
		public RuleCall getValueValueOrEnumValueOrOperationParserRuleCall_0_0() { return cValueValueOrEnumValueOrOperationParserRuleCall_0_0; }

		//(NL "," NL moreValues+=ValueOrEnumValueOrOperation)*
		public Group getGroup_1() { return cGroup_1; }

		//NL
		public RuleCall getNLParserRuleCall_1_0() { return cNLParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//NL
		public RuleCall getNLParserRuleCall_1_2() { return cNLParserRuleCall_1_2; }

		//moreValues+=ValueOrEnumValueOrOperation
		public Assignment getMoreValuesAssignment_1_3() { return cMoreValuesAssignment_1_3; }

		//ValueOrEnumValueOrOperation
		public RuleCall getMoreValuesValueOrEnumValueOrOperationParserRuleCall_1_3_0() { return cMoreValuesValueOrEnumValueOrOperationParserRuleCall_1_3_0; }
	}

	public class ValueOrEnumValueOrOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueOrEnumValueOrOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ValueOrEnumValueOrOperation:
		//
		//	Value | EnumValue | Operation;
		public ParserRule getRule() { return rule; }

		//Value | EnumValue | Operation
		public Alternatives getAlternatives() { return cAlternatives; }

		//Value
		public RuleCall getValueParserRuleCall_0() { return cValueParserRuleCall_0; }

		//EnumValue
		public RuleCall getEnumValueParserRuleCall_1() { return cEnumValueParserRuleCall_1; }

		//Operation
		public RuleCall getOperationParserRuleCall_2() { return cOperationParserRuleCall_2; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStaticValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNestedObjectParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Value:
		//
		//	StaticValue | Variable | NestedObject;
		public ParserRule getRule() { return rule; }

		//StaticValue | Variable | NestedObject
		public Alternatives getAlternatives() { return cAlternatives; }

		//StaticValue
		public RuleCall getStaticValueParserRuleCall_0() { return cStaticValueParserRuleCall_0; }

		//Variable
		public RuleCall getVariableParserRuleCall_1() { return cVariableParserRuleCall_1; }

		//NestedObject
		public RuleCall getNestedObjectParserRuleCall_2() { return cNestedObjectParserRuleCall_2; }
	}

	public class StaticValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StaticValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDecimalValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDateValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTimeValueParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDateAndTimeValueParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cNullValueParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//StaticValue:
		//
		//	StringValue | IntegerValue | DecimalValue | BooleanValue | DateValue | TimeValue | DateAndTimeValue | NullValue;
		public ParserRule getRule() { return rule; }

		//StringValue | IntegerValue | DecimalValue | BooleanValue | DateValue | TimeValue | DateAndTimeValue | NullValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringValue
		public RuleCall getStringValueParserRuleCall_0() { return cStringValueParserRuleCall_0; }

		//IntegerValue
		public RuleCall getIntegerValueParserRuleCall_1() { return cIntegerValueParserRuleCall_1; }

		//DecimalValue
		public RuleCall getDecimalValueParserRuleCall_2() { return cDecimalValueParserRuleCall_2; }

		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_3() { return cBooleanValueParserRuleCall_3; }

		//DateValue
		public RuleCall getDateValueParserRuleCall_4() { return cDateValueParserRuleCall_4; }

		//TimeValue
		public RuleCall getTimeValueParserRuleCall_5() { return cTimeValueParserRuleCall_5; }

		//DateAndTimeValue
		public RuleCall getDateAndTimeValueParserRuleCall_6() { return cDateAndTimeValueParserRuleCall_6; }

		//NullValue
		public RuleCall getNullValueParserRuleCall_7() { return cNullValueParserRuleCall_7; }
	}

	public class IntegerValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerValue");
		private final Assignment cIntegerValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIntegerValueINTEGERTerminalRuleCall_0 = (RuleCall)cIntegerValueAssignment.eContents().get(0);
		
		//IntegerValue:
		//
		//	integerValue=INTEGER;
		public ParserRule getRule() { return rule; }

		//integerValue=INTEGER
		public Assignment getIntegerValueAssignment() { return cIntegerValueAssignment; }

		//INTEGER
		public RuleCall getIntegerValueINTEGERTerminalRuleCall_0() { return cIntegerValueINTEGERTerminalRuleCall_0; }
	}

	public class DecimalValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DecimalValue");
		private final Assignment cDecimalValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDecimalValueDECIMALTerminalRuleCall_0 = (RuleCall)cDecimalValueAssignment.eContents().get(0);
		
		//DecimalValue:
		//
		//	decimalValue=DECIMAL;
		public ParserRule getRule() { return rule; }

		//decimalValue=DECIMAL
		public Assignment getDecimalValueAssignment() { return cDecimalValueAssignment; }

		//DECIMAL
		public RuleCall getDecimalValueDECIMALTerminalRuleCall_0() { return cDecimalValueDECIMALTerminalRuleCall_0; }
	}

	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringValue");
		private final Assignment cStringValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStringValueSTRINGTerminalRuleCall_0 = (RuleCall)cStringValueAssignment.eContents().get(0);
		
		//StringValue:
		//
		//	stringValue=STRING;
		public ParserRule getRule() { return rule; }

		//stringValue=STRING
		public Assignment getStringValueAssignment() { return cStringValueAssignment; }

		//STRING
		public RuleCall getStringValueSTRINGTerminalRuleCall_0() { return cStringValueSTRINGTerminalRuleCall_0; }
	}

	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanValue");
		private final Assignment cBooleanValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cBooleanValueAlternatives_0 = (Alternatives)cBooleanValueAssignment.eContents().get(0);
		private final RuleCall cBooleanValueBOOLEAN_TRUETerminalRuleCall_0_0 = (RuleCall)cBooleanValueAlternatives_0.eContents().get(0);
		private final RuleCall cBooleanValueBOOLEAN_FALSETerminalRuleCall_0_1 = (RuleCall)cBooleanValueAlternatives_0.eContents().get(1);
		
		//BooleanValue:
		//
		//	booleanValue=(BOOLEAN_TRUE | BOOLEAN_FALSE);
		public ParserRule getRule() { return rule; }

		//booleanValue=(BOOLEAN_TRUE | BOOLEAN_FALSE)
		public Assignment getBooleanValueAssignment() { return cBooleanValueAssignment; }

		//BOOLEAN_TRUE | BOOLEAN_FALSE
		public Alternatives getBooleanValueAlternatives_0() { return cBooleanValueAlternatives_0; }

		//BOOLEAN_TRUE
		public RuleCall getBooleanValueBOOLEAN_TRUETerminalRuleCall_0_0() { return cBooleanValueBOOLEAN_TRUETerminalRuleCall_0_0; }

		//BOOLEAN_FALSE
		public RuleCall getBooleanValueBOOLEAN_FALSETerminalRuleCall_0_1() { return cBooleanValueBOOLEAN_FALSETerminalRuleCall_0_1; }
	}

	public class DateValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIsoDateValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEuropeanDateValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUSDateValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DateValue:
		//
		//	IsoDateValue | EuropeanDateValue | USDateValue;
		public ParserRule getRule() { return rule; }

		//IsoDateValue | EuropeanDateValue | USDateValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//IsoDateValue
		public RuleCall getIsoDateValueParserRuleCall_0() { return cIsoDateValueParserRuleCall_0; }

		//EuropeanDateValue
		public RuleCall getEuropeanDateValueParserRuleCall_1() { return cEuropeanDateValueParserRuleCall_1; }

		//USDateValue
		public RuleCall getUSDateValueParserRuleCall_2() { return cUSDateValueParserRuleCall_2; }
	}

	public class IsoDateValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IsoDateValue");
		private final Assignment cDateValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDateValueISODATETerminalRuleCall_0 = (RuleCall)cDateValueAssignment.eContents().get(0);
		
		//IsoDateValue:
		//
		//	dateValue=ISODATE;
		public ParserRule getRule() { return rule; }

		//dateValue=ISODATE
		public Assignment getDateValueAssignment() { return cDateValueAssignment; }

		//ISODATE
		public RuleCall getDateValueISODATETerminalRuleCall_0() { return cDateValueISODATETerminalRuleCall_0; }
	}

	public class EuropeanDateValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EuropeanDateValue");
		private final Assignment cDateValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDateValueEURODATETerminalRuleCall_0 = (RuleCall)cDateValueAssignment.eContents().get(0);
		
		//EuropeanDateValue:
		//
		//	dateValue=EURODATE;
		public ParserRule getRule() { return rule; }

		//dateValue=EURODATE
		public Assignment getDateValueAssignment() { return cDateValueAssignment; }

		//EURODATE
		public RuleCall getDateValueEURODATETerminalRuleCall_0() { return cDateValueEURODATETerminalRuleCall_0; }
	}

	public class USDateValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "USDateValue");
		private final Assignment cDateValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDateValueUSDATETerminalRuleCall_0 = (RuleCall)cDateValueAssignment.eContents().get(0);
		
		//USDateValue:
		//
		//	dateValue=USDATE;
		public ParserRule getRule() { return rule; }

		//dateValue=USDATE
		public Assignment getDateValueAssignment() { return cDateValueAssignment; }

		//USDATE
		public RuleCall getDateValueUSDATETerminalRuleCall_0() { return cDateValueUSDATETerminalRuleCall_0; }
	}

	public class TimeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIsoTimeValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimple24HrsTimeValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSimple12HrsTimeValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TimeValue:
		//
		//	IsoTimeValue | Simple24HrsTimeValue | Simple12HrsTimeValue;
		public ParserRule getRule() { return rule; }

		//IsoTimeValue | Simple24HrsTimeValue | Simple12HrsTimeValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//IsoTimeValue
		public RuleCall getIsoTimeValueParserRuleCall_0() { return cIsoTimeValueParserRuleCall_0; }

		//Simple24HrsTimeValue
		public RuleCall getSimple24HrsTimeValueParserRuleCall_1() { return cSimple24HrsTimeValueParserRuleCall_1; }

		//Simple12HrsTimeValue
		public RuleCall getSimple12HrsTimeValueParserRuleCall_2() { return cSimple12HrsTimeValueParserRuleCall_2; }
	}

	public class IsoTimeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IsoTimeValue");
		private final Assignment cTimeValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTimeValueISOTIMETerminalRuleCall_0 = (RuleCall)cTimeValueAssignment.eContents().get(0);
		
		//IsoTimeValue:
		//
		//	timeValue=ISOTIME;
		public ParserRule getRule() { return rule; }

		//timeValue=ISOTIME
		public Assignment getTimeValueAssignment() { return cTimeValueAssignment; }

		//ISOTIME
		public RuleCall getTimeValueISOTIMETerminalRuleCall_0() { return cTimeValueISOTIMETerminalRuleCall_0; }
	}

	public class Simple24HrsTimeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Simple24HrsTimeValue");
		private final Assignment cTimeValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTimeValueTWENTYFOURHRSTIMETerminalRuleCall_0 = (RuleCall)cTimeValueAssignment.eContents().get(0);
		
		//Simple24HrsTimeValue:
		//
		//	timeValue=TWENTYFOURHRSTIME;
		public ParserRule getRule() { return rule; }

		//timeValue=TWENTYFOURHRSTIME
		public Assignment getTimeValueAssignment() { return cTimeValueAssignment; }

		//TWENTYFOURHRSTIME
		public RuleCall getTimeValueTWENTYFOURHRSTIMETerminalRuleCall_0() { return cTimeValueTWENTYFOURHRSTIMETerminalRuleCall_0; }
	}

	public class Simple12HrsTimeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Simple12HrsTimeValue");
		private final Assignment cTimeValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTimeValueTWELVEHRSTIMETerminalRuleCall_0 = (RuleCall)cTimeValueAssignment.eContents().get(0);
		
		//Simple12HrsTimeValue:
		//
		//	timeValue=TWELVEHRSTIME;
		public ParserRule getRule() { return rule; }

		//timeValue=TWELVEHRSTIME
		public Assignment getTimeValueAssignment() { return cTimeValueAssignment; }

		//TWELVEHRSTIME
		public RuleCall getTimeValueTWELVEHRSTIMETerminalRuleCall_0() { return cTimeValueTWELVEHRSTIMETerminalRuleCall_0; }
	}

	public class DateAndTimeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateAndTimeValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIsoDateAndTimeValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEuropeanDateAnd24HrsTimeValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEuropeanDateAnd12HrsTimeValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUSDateAnd12HrsTimeValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//DateAndTimeValue:
		//
		//	IsoDateAndTimeValue | EuropeanDateAnd24HrsTimeValue | EuropeanDateAnd12HrsTimeValue | USDateAnd12HrsTimeValue;
		public ParserRule getRule() { return rule; }

		//IsoDateAndTimeValue | EuropeanDateAnd24HrsTimeValue | EuropeanDateAnd12HrsTimeValue | USDateAnd12HrsTimeValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//IsoDateAndTimeValue
		public RuleCall getIsoDateAndTimeValueParserRuleCall_0() { return cIsoDateAndTimeValueParserRuleCall_0; }

		//EuropeanDateAnd24HrsTimeValue
		public RuleCall getEuropeanDateAnd24HrsTimeValueParserRuleCall_1() { return cEuropeanDateAnd24HrsTimeValueParserRuleCall_1; }

		//EuropeanDateAnd12HrsTimeValue
		public RuleCall getEuropeanDateAnd12HrsTimeValueParserRuleCall_2() { return cEuropeanDateAnd12HrsTimeValueParserRuleCall_2; }

		//USDateAnd12HrsTimeValue
		public RuleCall getUSDateAnd12HrsTimeValueParserRuleCall_3() { return cUSDateAnd12HrsTimeValueParserRuleCall_3; }
	}

	public class IsoDateAndTimeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IsoDateAndTimeValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDateValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDateValueISODATETerminalRuleCall_0_0 = (RuleCall)cDateValueAssignment_0.eContents().get(0);
		private final Assignment cTimeValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimeValueISOTIMETerminalRuleCall_1_0 = (RuleCall)cTimeValueAssignment_1.eContents().get(0);
		
		//IsoDateAndTimeValue:
		//
		//	dateValue=ISODATE timeValue=ISOTIME;
		public ParserRule getRule() { return rule; }

		//dateValue=ISODATE timeValue=ISOTIME
		public Group getGroup() { return cGroup; }

		//dateValue=ISODATE
		public Assignment getDateValueAssignment_0() { return cDateValueAssignment_0; }

		//ISODATE
		public RuleCall getDateValueISODATETerminalRuleCall_0_0() { return cDateValueISODATETerminalRuleCall_0_0; }

		//timeValue=ISOTIME
		public Assignment getTimeValueAssignment_1() { return cTimeValueAssignment_1; }

		//ISOTIME
		public RuleCall getTimeValueISOTIMETerminalRuleCall_1_0() { return cTimeValueISOTIMETerminalRuleCall_1_0; }
	}

	public class EuropeanDateAnd24HrsTimeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EuropeanDateAnd24HrsTimeValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDateValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDateValueEURODATETerminalRuleCall_0_0 = (RuleCall)cDateValueAssignment_0.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cTimeValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimeValueTWENTYFOURHRSTIMETerminalRuleCall_2_0 = (RuleCall)cTimeValueAssignment_2.eContents().get(0);
		
		//EuropeanDateAnd24HrsTimeValue:
		//
		//	dateValue=EURODATE NL timeValue=TWENTYFOURHRSTIME;
		public ParserRule getRule() { return rule; }

		//dateValue=EURODATE NL timeValue=TWENTYFOURHRSTIME
		public Group getGroup() { return cGroup; }

		//dateValue=EURODATE
		public Assignment getDateValueAssignment_0() { return cDateValueAssignment_0; }

		//EURODATE
		public RuleCall getDateValueEURODATETerminalRuleCall_0_0() { return cDateValueEURODATETerminalRuleCall_0_0; }

		//NL
		public RuleCall getNLParserRuleCall_1() { return cNLParserRuleCall_1; }

		//timeValue=TWENTYFOURHRSTIME
		public Assignment getTimeValueAssignment_2() { return cTimeValueAssignment_2; }

		//TWENTYFOURHRSTIME
		public RuleCall getTimeValueTWENTYFOURHRSTIMETerminalRuleCall_2_0() { return cTimeValueTWENTYFOURHRSTIMETerminalRuleCall_2_0; }
	}

	public class EuropeanDateAnd12HrsTimeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EuropeanDateAnd12HrsTimeValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDateValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDateValueEURODATETerminalRuleCall_0_0 = (RuleCall)cDateValueAssignment_0.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cTimeValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimeValueTWELVEHRSTIMETerminalRuleCall_2_0 = (RuleCall)cTimeValueAssignment_2.eContents().get(0);
		
		//EuropeanDateAnd12HrsTimeValue:
		//
		//	dateValue=EURODATE NL timeValue=TWELVEHRSTIME;
		public ParserRule getRule() { return rule; }

		//dateValue=EURODATE NL timeValue=TWELVEHRSTIME
		public Group getGroup() { return cGroup; }

		//dateValue=EURODATE
		public Assignment getDateValueAssignment_0() { return cDateValueAssignment_0; }

		//EURODATE
		public RuleCall getDateValueEURODATETerminalRuleCall_0_0() { return cDateValueEURODATETerminalRuleCall_0_0; }

		//NL
		public RuleCall getNLParserRuleCall_1() { return cNLParserRuleCall_1; }

		//timeValue=TWELVEHRSTIME
		public Assignment getTimeValueAssignment_2() { return cTimeValueAssignment_2; }

		//TWELVEHRSTIME
		public RuleCall getTimeValueTWELVEHRSTIMETerminalRuleCall_2_0() { return cTimeValueTWELVEHRSTIMETerminalRuleCall_2_0; }
	}

	public class USDateAnd12HrsTimeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "USDateAnd12HrsTimeValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDateValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDateValueUSDATETerminalRuleCall_0_0 = (RuleCall)cDateValueAssignment_0.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cTimeValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimeValueTWELVEHRSTIMETerminalRuleCall_2_0 = (RuleCall)cTimeValueAssignment_2.eContents().get(0);
		
		//USDateAnd12HrsTimeValue:
		//
		//	dateValue=USDATE NL timeValue=TWELVEHRSTIME;
		public ParserRule getRule() { return rule; }

		//dateValue=USDATE NL timeValue=TWELVEHRSTIME
		public Group getGroup() { return cGroup; }

		//dateValue=USDATE
		public Assignment getDateValueAssignment_0() { return cDateValueAssignment_0; }

		//USDATE
		public RuleCall getDateValueUSDATETerminalRuleCall_0_0() { return cDateValueUSDATETerminalRuleCall_0_0; }

		//NL
		public RuleCall getNLParserRuleCall_1() { return cNLParserRuleCall_1; }

		//timeValue=TWELVEHRSTIME
		public Assignment getTimeValueAssignment_2() { return cTimeValueAssignment_2; }

		//TWELVEHRSTIME
		public RuleCall getTimeValueTWELVEHRSTIMETerminalRuleCall_2_0() { return cTimeValueTWELVEHRSTIMETerminalRuleCall_2_0; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cNameVariableEntityCrossReference_0 = (CrossReference)cNameAssignment.eContents().get(0);
		private final RuleCall cNameVariableEntityQualifiedNameParserRuleCall_0_1 = (RuleCall)cNameVariableEntityCrossReference_0.eContents().get(1);
		
		//Variable:
		//
		//	name=[VariableEntity|QualifiedName];
		public ParserRule getRule() { return rule; }

		//name=[VariableEntity|QualifiedName]
		public Assignment getNameAssignment() { return cNameAssignment; }

		//[VariableEntity|QualifiedName]
		public CrossReference getNameVariableEntityCrossReference_0() { return cNameVariableEntityCrossReference_0; }

		//QualifiedName
		public RuleCall getNameVariableEntityQualifiedNameParserRuleCall_0_1() { return cNameVariableEntityQualifiedNameParserRuleCall_0_1; }
	}

	public class NullValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NullValue:
		//
		//	{Null} "null";
		public ParserRule getRule() { return rule; }

		//{Null} "null"
		public Group getGroup() { return cGroup; }

		//{Null}
		public Action getNullAction_0() { return cNullAction_0; }

		//"null"
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}

	public class EnumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumValue");
		private final Assignment cEnumValueAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cEnumValueJvmEnumerationLiteralCrossReference_0 = (CrossReference)cEnumValueAssignment.eContents().get(0);
		private final RuleCall cEnumValueJvmEnumerationLiteralUPPERCASE_IDTerminalRuleCall_0_1 = (RuleCall)cEnumValueJvmEnumerationLiteralCrossReference_0.eContents().get(1);
		
		//EnumValue:
		//
		//	enumValue=[jvmTypes::JvmEnumerationLiteral|UPPERCASE_ID];
		public ParserRule getRule() { return rule; }

		//enumValue=[jvmTypes::JvmEnumerationLiteral|UPPERCASE_ID]
		public Assignment getEnumValueAssignment() { return cEnumValueAssignment; }

		//[jvmTypes::JvmEnumerationLiteral|UPPERCASE_ID]
		public CrossReference getEnumValueJvmEnumerationLiteralCrossReference_0() { return cEnumValueJvmEnumerationLiteralCrossReference_0; }

		//UPPERCASE_ID
		public RuleCall getEnumValueJvmEnumerationLiteralUPPERCASE_IDTerminalRuleCall_0_1() { return cEnumValueJvmEnumerationLiteralUPPERCASE_IDTerminalRuleCall_0_1; }
	}

	public class NestedObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NestedObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cAttributesKeyValuePairParserRuleCall_2_0_0 = (RuleCall)cAttributesAssignment_2_0.eContents().get(0);
		private final RuleCall cNLParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NestedObject:
		//
		//	"{" NL (attributes+=KeyValuePair NL)+ "}";
		public ParserRule getRule() { return rule; }

		//"{" NL (attributes+=KeyValuePair NL)+ "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//NL
		public RuleCall getNLParserRuleCall_1() { return cNLParserRuleCall_1; }

		//(attributes+=KeyValuePair NL)+
		public Group getGroup_2() { return cGroup_2; }

		//attributes+=KeyValuePair
		public Assignment getAttributesAssignment_2_0() { return cAttributesAssignment_2_0; }

		//KeyValuePair
		public RuleCall getAttributesKeyValuePairParserRuleCall_2_0_0() { return cAttributesKeyValuePairParserRuleCall_2_0_0; }

		//NL
		public RuleCall getNLParserRuleCall_2_1() { return cNLParserRuleCall_2_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class KeyValuePairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KeyValuePair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIDTerminalRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cNLParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueValueOrEnumValueOrOperationCollectionParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		//KeyValuePair:
		//
		//	identifier=ID NL ":" NL value=ValueOrEnumValueOrOperationCollection;
		public ParserRule getRule() { return rule; }

		//identifier=ID NL ":" NL value=ValueOrEnumValueOrOperationCollection
		public Group getGroup() { return cGroup; }

		//identifier=ID
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0_0() { return cIdentifierIDTerminalRuleCall_0_0; }

		//NL
		public RuleCall getNLParserRuleCall_1() { return cNLParserRuleCall_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//NL
		public RuleCall getNLParserRuleCall_3() { return cNLParserRuleCall_3; }

		//value=ValueOrEnumValueOrOperationCollection
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//ValueOrEnumValueOrOperationCollection
		public RuleCall getValueValueOrEnumValueOrOperationCollectionParserRuleCall_4_0() { return cValueValueOrEnumValueOrOperationCollectionParserRuleCall_4_0; }
	}

	public class JavaClassReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JavaClassReference");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeJvmTypeCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeJvmTypeQualifiedJavaClassNameParserRuleCall_0_1 = (RuleCall)cTypeJvmTypeCrossReference_0.eContents().get(1);
		
		//JavaClassReference:
		//
		//	type=[jvmTypes::JvmType|QualifiedJavaClassName];
		public ParserRule getRule() { return rule; }

		//type=[jvmTypes::JvmType|QualifiedJavaClassName]
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//[jvmTypes::JvmType|QualifiedJavaClassName]
		public CrossReference getTypeJvmTypeCrossReference_0() { return cTypeJvmTypeCrossReference_0; }

		//QualifiedJavaClassName
		public RuleCall getTypeJvmTypeQualifiedJavaClassNameParserRuleCall_0_1() { return cTypeJvmTypeQualifiedJavaClassNameParserRuleCall_0_1; }
	}

	public class MethodReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeJvmTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeJvmTypeQualifiedJavaClassNameParserRuleCall_0_0_1 = (RuleCall)cTypeJvmTypeCrossReference_0_0.eContents().get(1);
		private final Keyword cNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMethodAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMethodJvmOperationCrossReference_2_0 = (CrossReference)cMethodAssignment_2.eContents().get(0);
		private final RuleCall cMethodJvmOperationIDTerminalRuleCall_2_0_1 = (RuleCall)cMethodJvmOperationCrossReference_2_0.eContents().get(1);
		
		//MethodReference:
		//
		//	type=[jvmTypes::JvmType|QualifiedJavaClassName] "#" method=[jvmTypes::JvmOperation];
		public ParserRule getRule() { return rule; }

		//type=[jvmTypes::JvmType|QualifiedJavaClassName] "#" method=[jvmTypes::JvmOperation]
		public Group getGroup() { return cGroup; }

		//type=[jvmTypes::JvmType|QualifiedJavaClassName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[jvmTypes::JvmType|QualifiedJavaClassName]
		public CrossReference getTypeJvmTypeCrossReference_0_0() { return cTypeJvmTypeCrossReference_0_0; }

		//QualifiedJavaClassName
		public RuleCall getTypeJvmTypeQualifiedJavaClassNameParserRuleCall_0_0_1() { return cTypeJvmTypeQualifiedJavaClassNameParserRuleCall_0_0_1; }

		//"#"
		public Keyword getNumberSignKeyword_1() { return cNumberSignKeyword_1; }

		//method=[jvmTypes::JvmOperation]
		public Assignment getMethodAssignment_2() { return cMethodAssignment_2; }

		//[jvmTypes::JvmOperation]
		public CrossReference getMethodJvmOperationCrossReference_2_0() { return cMethodJvmOperationCrossReference_2_0; }

		//ID
		public RuleCall getMethodJvmOperationIDTerminalRuleCall_2_0_1() { return cMethodJvmOperationIDTerminalRuleCall_2_0_1; }
	}

	public class ExecutionMultiplierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExecutionMultiplier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCountAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCountINTEGERTerminalRuleCall_0_0 = (RuleCall)cCountAssignment_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ExecutionMultiplier:
		//
		//	count=INTEGER "*";
		public ParserRule getRule() { return rule; }

		//count=INTEGER "*"
		public Group getGroup() { return cGroup; }

		//count=INTEGER
		public Assignment getCountAssignment_0() { return cCountAssignment_0; }

		//INTEGER
		public RuleCall getCountINTEGERTerminalRuleCall_0_0() { return cCountINTEGERTerminalRuleCall_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class QualifiedJavaClassNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedJavaClassName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cUPPERCASE_IDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//QualifiedJavaClassName:
		//
		//	QualifiedName "." UPPERCASE_ID;
		public ParserRule getRule() { return rule; }

		//QualifiedName "." UPPERCASE_ID
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//UPPERCASE_ID
		public RuleCall getUPPERCASE_IDTerminalRuleCall_2() { return cUPPERCASE_IDTerminalRuleCall_2; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class NLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//NL:
		//
		//	(NEWLINE WS?)*;
		public ParserRule getRule() { return rule; }

		//(NEWLINE WS?)*
		public Group getGroup() { return cGroup; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_0() { return cNEWLINETerminalRuleCall_0; }

		//WS?
		public RuleCall getWSTerminalRuleCall_1() { return cWSTerminalRuleCall_1; }
	}

	public class NLFORCEDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NLFORCED");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cNLParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//NLFORCED:
		//
		//	NEWLINE WS? NL;
		public ParserRule getRule() { return rule; }

		//NEWLINE WS? NL
		public Group getGroup() { return cGroup; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_0() { return cNEWLINETerminalRuleCall_0; }

		//WS?
		public RuleCall getWSTerminalRuleCall_1() { return cWSTerminalRuleCall_1; }

		//NL
		public RuleCall getNLParserRuleCall_2() { return cNLParserRuleCall_2; }
	}
	
	
	private ModelElements pModel;
	private StatementElements pStatement;
	private VisibleCommentElements pVisibleComment;
	private VisibleSingleLineCommentElements pVisibleSingleLineComment;
	private VisibleMultiLineCommentElements pVisibleMultiLineComment;
	private VisibleDividerElements pVisibleDivider;
	private PackageDefinitionElements pPackageDefinition;
	private PackageStatementElements pPackageStatement;
	private ImportElements pImport;
	private ForkDefinitionElements pForkDefinition;
	private ForkParameterElements pForkParameter;
	private VariantDefinitionElements pVariantDefinition;
	private TestDefinitionElements pTestDefinition;
	private CallDefinitionElements pCallDefinition;
	private SuiteDefinitionElements pSuiteDefinition;
	private OperationDefinitionElements pOperationDefinition;
	private SuiteStatementElements pSuiteStatement;
	private SuiteStatementWithResultElements pSuiteStatementWithResult;
	private VariableDefinitionElements pVariableDefinition;
	private ConstantDefinitionElements pConstantDefinition;
	private VariantValueElements pVariantValue;
	private VariableEntityElements pVariableEntity;
	private TestElements pTest;
	private TableTestElements pTableTest;
	private TableTestRowElements pTableTestRow;
	private ParameterTableHeaderElements pParameterTableHeader;
	private ResultTableHeaderElements pResultTableHeader;
	private ParameterTableValueElements pParameterTableValue;
	private NamedResultElements pNamedResult;
	private ResultNameElements pResultName;
	private FixedResultNameElements pFixedResultName;
	private CallElements pCall;
	private NamedCallResultElements pNamedCallResult;
	private SuiteElements pSuite;
	private SuiteParameterElements pSuiteParameter;
	private ParameterElements pParameter;
	private ParameterNameElements pParameterName;
	private FixedParameterNameElements pFixedParameterName;
	private ArbitraryParameterOrResultNameElements pArbitraryParameterOrResultName;
	private OperationElements pOperation;
	private StandardOperationElements pStandardOperation;
	private CustomOperationElements pCustomOperation;
	private ValueOrEnumValueOrOperationCollectionElements pValueOrEnumValueOrOperationCollection;
	private ValueOrEnumValueOrOperationElements pValueOrEnumValueOrOperation;
	private ValueElements pValue;
	private StaticValueElements pStaticValue;
	private IntegerValueElements pIntegerValue;
	private DecimalValueElements pDecimalValue;
	private StringValueElements pStringValue;
	private BooleanValueElements pBooleanValue;
	private DateValueElements pDateValue;
	private IsoDateValueElements pIsoDateValue;
	private EuropeanDateValueElements pEuropeanDateValue;
	private USDateValueElements pUSDateValue;
	private TimeValueElements pTimeValue;
	private IsoTimeValueElements pIsoTimeValue;
	private Simple24HrsTimeValueElements pSimple24HrsTimeValue;
	private Simple12HrsTimeValueElements pSimple12HrsTimeValue;
	private DateAndTimeValueElements pDateAndTimeValue;
	private IsoDateAndTimeValueElements pIsoDateAndTimeValue;
	private EuropeanDateAnd24HrsTimeValueElements pEuropeanDateAnd24HrsTimeValue;
	private EuropeanDateAnd12HrsTimeValueElements pEuropeanDateAnd12HrsTimeValue;
	private USDateAnd12HrsTimeValueElements pUSDateAnd12HrsTimeValue;
	private VariableElements pVariable;
	private NullValueElements pNullValue;
	private EnumValueElements pEnumValue;
	private NestedObjectElements pNestedObject;
	private KeyValuePairElements pKeyValuePair;
	private JavaClassReferenceElements pJavaClassReference;
	private MethodReferenceElements pMethodReference;
	private ExecutionMultiplierElements pExecutionMultiplier;
	private QualifiedNameElements pQualifiedName;
	private QualifiedJavaClassNameElements pQualifiedJavaClassName;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private NLElements pNL;
	private NLFORCEDElements pNLFORCED;
	private TerminalRule tBOOLEAN_TRUE;
	private TerminalRule tBOOLEAN_FALSE;
	private TerminalRule tUPPERCASE_ID;
	private TerminalRule tID;
	private TerminalRule tINTEGER;
	private TerminalRule tDECIMAL;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tSL_VISIBLE_COMMENT;
	private TerminalRule tML_VISIBLE_COMMENT;
	private TerminalRule tDIVIDER;
	private TerminalRule tWS;
	private TerminalRule tNEWLINE;
	private TerminalRule tISODATE;
	private TerminalRule tISOTIME;
	private TerminalRule tISOTIMEZONE;
	private TerminalRule tEURODATE;
	private TerminalRule tUSDATE;
	private TerminalRule tTWENTYFOURHRSTIME;
	private TerminalRule tTWELVEHRSTIME;
	private TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public DSLGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.gebit.integrity.DSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//
	//	{Model} NL statements+=Statement*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Statement:
	//
	//	Import | PackageDefinition | ForkDefinition | VariantDefinition;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//VisibleComment:
	//
	//	VisibleSingleLineComment | VisibleMultiLineComment;
	public VisibleCommentElements getVisibleCommentAccess() {
		return (pVisibleComment != null) ? pVisibleComment : (pVisibleComment = new VisibleCommentElements());
	}
	
	public ParserRule getVisibleCommentRule() {
		return getVisibleCommentAccess().getRule();
	}

	//VisibleSingleLineComment:
	//
	//	content=SL_VISIBLE_COMMENT NL;
	public VisibleSingleLineCommentElements getVisibleSingleLineCommentAccess() {
		return (pVisibleSingleLineComment != null) ? pVisibleSingleLineComment : (pVisibleSingleLineComment = new VisibleSingleLineCommentElements());
	}
	
	public ParserRule getVisibleSingleLineCommentRule() {
		return getVisibleSingleLineCommentAccess().getRule();
	}

	//VisibleMultiLineComment:
	//
	//	content=ML_VISIBLE_COMMENT NL;
	public VisibleMultiLineCommentElements getVisibleMultiLineCommentAccess() {
		return (pVisibleMultiLineComment != null) ? pVisibleMultiLineComment : (pVisibleMultiLineComment = new VisibleMultiLineCommentElements());
	}
	
	public ParserRule getVisibleMultiLineCommentRule() {
		return getVisibleMultiLineCommentAccess().getRule();
	}

	//VisibleDivider:
	//
	//	content=DIVIDER NL;
	public VisibleDividerElements getVisibleDividerAccess() {
		return (pVisibleDivider != null) ? pVisibleDivider : (pVisibleDivider = new VisibleDividerElements());
	}
	
	public ParserRule getVisibleDividerRule() {
		return getVisibleDividerAccess().getRule();
	}

	//PackageDefinition:
	//
	//	"packagedef" NL name=QualifiedName "with" NL statements+=PackageStatement* "packageend" NL;
	public PackageDefinitionElements getPackageDefinitionAccess() {
		return (pPackageDefinition != null) ? pPackageDefinition : (pPackageDefinition = new PackageDefinitionElements());
	}
	
	public ParserRule getPackageDefinitionRule() {
		return getPackageDefinitionAccess().getRule();
	}

	//PackageStatement:
	//
	//	Import | ForkDefinition | VariantDefinition | TestDefinition | CallDefinition | OperationDefinition | SuiteDefinition
	//
	//	| VariableDefinition | ConstantDefinition;
	public PackageStatementElements getPackageStatementAccess() {
		return (pPackageStatement != null) ? pPackageStatement : (pPackageStatement = new PackageStatementElements());
	}
	
	public ParserRule getPackageStatementRule() {
		return getPackageStatementAccess().getRule();
	}

	//Import:
	//
	//	"import" NL importedNamespace=QualifiedNameWithWildcard NL;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//ForkDefinition:
	//
	//	"forkdef" NL name=QualifiedName NL (description=STRING NL)? ("uses" NL forkerClass=JavaClassReference NL)?
	//
	//	(parameters+=ForkParameter NL)*;
	public ForkDefinitionElements getForkDefinitionAccess() {
		return (pForkDefinition != null) ? pForkDefinition : (pForkDefinition = new ForkDefinitionElements());
	}
	
	public ParserRule getForkDefinitionRule() {
		return getForkDefinitionAccess().getRule();
	}

	//ForkParameter:
	//
	//	name=FixedParameterName NL ":" NL value=ValueOrEnumValueOrOperation;
	public ForkParameterElements getForkParameterAccess() {
		return (pForkParameter != null) ? pForkParameter : (pForkParameter = new ForkParameterElements());
	}
	
	public ParserRule getForkParameterRule() {
		return getForkParameterAccess().getRule();
	}

	//VariantDefinition:
	//
	//	"variantdef" NL name=QualifiedName NL (description=STRING NL)?;
	public VariantDefinitionElements getVariantDefinitionAccess() {
		return (pVariantDefinition != null) ? pVariantDefinition : (pVariantDefinition = new VariantDefinitionElements());
	}
	
	public ParserRule getVariantDefinitionRule() {
		return getVariantDefinitionAccess().getRule();
	}

	//TestDefinition:
	//
	//	"testdef" NL name=QualifiedName NL "uses" NL fixtureMethod=MethodReference NL;
	public TestDefinitionElements getTestDefinitionAccess() {
		return (pTestDefinition != null) ? pTestDefinition : (pTestDefinition = new TestDefinitionElements());
	}
	
	public ParserRule getTestDefinitionRule() {
		return getTestDefinitionAccess().getRule();
	}

	//CallDefinition:
	//
	//	"calldef" NL name=QualifiedName NL "uses" NL fixtureMethod=MethodReference NL;
	public CallDefinitionElements getCallDefinitionAccess() {
		return (pCallDefinition != null) ? pCallDefinition : (pCallDefinition = new CallDefinitionElements());
	}
	
	public ParserRule getCallDefinitionRule() {
		return getCallDefinitionAccess().getRule();
	}

	//SuiteDefinition:
	//
	//	"suitedef" NL name=QualifiedName NL ("gets" NL (parameters+=VariableEntity NL)*)? ("requires" NL
	//
	//	(dependencies+=[SuiteDefinition|QualifiedName] NL)*)? ("concludedby" NL (finalizers+=[SuiteDefinition|QualifiedName]
	//
	//	NL)*)? "with" NL statements+=SuiteStatement* "suiteend" NL;
	public SuiteDefinitionElements getSuiteDefinitionAccess() {
		return (pSuiteDefinition != null) ? pSuiteDefinition : (pSuiteDefinition = new SuiteDefinitionElements());
	}
	
	public ParserRule getSuiteDefinitionRule() {
		return getSuiteDefinitionAccess().getRule();
	}

	//OperationDefinition:
	//
	//	"operationdef" NL name=QualifiedName NL "uses" NL operationType=[jvmTypes::JvmType|QualifiedJavaClassName] NL;
	public OperationDefinitionElements getOperationDefinitionAccess() {
		return (pOperationDefinition != null) ? pOperationDefinition : (pOperationDefinition = new OperationDefinitionElements());
	}
	
	public ParserRule getOperationDefinitionRule() {
		return getOperationDefinitionAccess().getRule();
	}

	//SuiteStatement:
	//
	//	SuiteStatementWithResult | VariableDefinition | ConstantDefinition | VisibleComment | VisibleDivider;
	public SuiteStatementElements getSuiteStatementAccess() {
		return (pSuiteStatement != null) ? pSuiteStatement : (pSuiteStatement = new SuiteStatementElements());
	}
	
	public ParserRule getSuiteStatementRule() {
		return getSuiteStatementAccess().getRule();
	}

	//SuiteStatementWithResult:
	//
	//	Suite | Test | TableTest | Call;
	public SuiteStatementWithResultElements getSuiteStatementWithResultAccess() {
		return (pSuiteStatementWithResult != null) ? pSuiteStatementWithResult : (pSuiteStatementWithResult = new SuiteStatementWithResultElements());
	}
	
	public ParserRule getSuiteStatementWithResultRule() {
		return getSuiteStatementWithResultAccess().getRule();
	}

	//VariableDefinition:
	//
	//	"variable" NL name=VariableEntity NL ("initially" NL initialValue=Value NL)?;
	public VariableDefinitionElements getVariableDefinitionAccess() {
		return (pVariableDefinition != null) ? pVariableDefinition : (pVariableDefinition = new VariableDefinitionElements());
	}
	
	public ParserRule getVariableDefinitionRule() {
		return getVariableDefinitionAccess().getRule();
	}

	//ConstantDefinition:
	//
	//	"constant" NL name=VariableEntity NL (value=StaticValue NL)? (variantValues+=VariantValue NL)*;
	public ConstantDefinitionElements getConstantDefinitionAccess() {
		return (pConstantDefinition != null) ? pConstantDefinition : (pConstantDefinition = new ConstantDefinitionElements());
	}
	
	public ParserRule getConstantDefinitionRule() {
		return getConstantDefinitionAccess().getRule();
	}

	//VariantValue:
	//
	//	"in" NL (names+=[VariantDefinition|QualifiedName] NL)+ ":" NL value=StaticValue;
	public VariantValueElements getVariantValueAccess() {
		return (pVariantValue != null) ? pVariantValue : (pVariantValue = new VariantValueElements());
	}
	
	public ParserRule getVariantValueRule() {
		return getVariantValueAccess().getRule();
	}

	//VariableEntity:
	//
	//	name=QualifiedName;
	public VariableEntityElements getVariableEntityAccess() {
		return (pVariableEntity != null) ? pVariableEntity : (pVariableEntity = new VariableEntityElements());
	}
	
	public ParserRule getVariableEntityRule() {
		return getVariableEntityAccess().getRule();
	}

	//Test:
	//
	//	"test" NL definition=[TestDefinition|QualifiedName] (NL parameters+=Parameter)* (NL results+=NamedResult)* (NL "=" NL
	//
	//	result=ValueOrEnumValueOrOperationCollection)? NL;
	public TestElements getTestAccess() {
		return (pTest != null) ? pTest : (pTest = new TestElements());
	}
	
	public ParserRule getTestRule() {
		return getTestAccess().getRule();
	}

	//TableTest:
	//
	//	"tabletest" NL definition=[TestDefinition|QualifiedName] (NL parameters+=Parameter)* NLFORCED
	//
	//	parameterHeaders+=ParameterTableHeader* resultHeaders+=ResultTableHeader* "|" (defaultResultColumn="=" "|")?
	//
	//	(NLFORCED rows+=TableTestRow)+ NLFORCED;
	public TableTestElements getTableTestAccess() {
		return (pTableTest != null) ? pTableTest : (pTableTest = new TableTestElements());
	}
	
	public ParserRule getTableTestRule() {
		return getTableTestAccess().getRule();
	}

	//TableTestRow:
	//
	//	{TableTestRow} values+=ParameterTableValue+;
	public TableTestRowElements getTableTestRowAccess() {
		return (pTableTestRow != null) ? pTableTestRow : (pTableTestRow = new TableTestRowElements());
	}
	
	public ParserRule getTableTestRowRule() {
		return getTableTestRowAccess().getRule();
	}

	//ParameterTableHeader:
	//
	//	"|" name=ParameterName "|"?;
	public ParameterTableHeaderElements getParameterTableHeaderAccess() {
		return (pParameterTableHeader != null) ? pParameterTableHeader : (pParameterTableHeader = new ParameterTableHeaderElements());
	}
	
	public ParserRule getParameterTableHeaderRule() {
		return getParameterTableHeaderAccess().getRule();
	}

	//ResultTableHeader:
	//
	//	"|" name=ResultName "=" "|"?;
	public ResultTableHeaderElements getResultTableHeaderAccess() {
		return (pResultTableHeader != null) ? pResultTableHeader : (pResultTableHeader = new ResultTableHeaderElements());
	}
	
	public ParserRule getResultTableHeaderRule() {
		return getResultTableHeaderAccess().getRule();
	}

	//ParameterTableValue:
	//
	//	"|" value=ValueOrEnumValueOrOperationCollection "|"?;
	public ParameterTableValueElements getParameterTableValueAccess() {
		return (pParameterTableValue != null) ? pParameterTableValue : (pParameterTableValue = new ParameterTableValueElements());
	}
	
	public ParserRule getParameterTableValueRule() {
		return getParameterTableValueAccess().getRule();
	}

	//NamedResult:
	//
	//	name=ResultName NL "=" NL value=ValueOrEnumValueOrOperationCollection;
	public NamedResultElements getNamedResultAccess() {
		return (pNamedResult != null) ? pNamedResult : (pNamedResult = new NamedResultElements());
	}
	
	public ParserRule getNamedResultRule() {
		return getNamedResultAccess().getRule();
	}

	//ResultName:
	//
	//	FixedResultName | ArbitraryParameterOrResultName;
	public ResultNameElements getResultNameAccess() {
		return (pResultName != null) ? pResultName : (pResultName = new ResultNameElements());
	}
	
	public ParserRule getResultNameRule() {
		return getResultNameAccess().getRule();
	}

	//FixedResultName:
	//
	//	field=[jvmTypes::JvmField];
	public FixedResultNameElements getFixedResultNameAccess() {
		return (pFixedResultName != null) ? pFixedResultName : (pFixedResultName = new FixedResultNameElements());
	}
	
	public ParserRule getFixedResultNameRule() {
		return getFixedResultNameAccess().getRule();
	}

	//Call:
	//
	//	"call" NL (multiplier=ExecutionMultiplier NL)? definition=[CallDefinition|QualifiedName] (NL parameters+=Parameter)*
	//
	//	(NL results+=NamedCallResult)* (NL "->" NL result=Variable)? NL;
	public CallElements getCallAccess() {
		return (pCall != null) ? pCall : (pCall = new CallElements());
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}

	//NamedCallResult:
	//
	//	name=ResultName NL "->" NL target=Variable;
	public NamedCallResultElements getNamedCallResultAccess() {
		return (pNamedCallResult != null) ? pNamedCallResult : (pNamedCallResult = new NamedCallResultElements());
	}
	
	public ParserRule getNamedCallResultRule() {
		return getNamedCallResultAccess().getRule();
	}

	//Suite:
	//
	//	"suite" NL (multiplier=ExecutionMultiplier NL)? definition=[SuiteDefinition|QualifiedName] NL
	//
	//	(parameters+=SuiteParameter NL)* ("on" NL fork=[ForkDefinition|QualifiedName] NL)? ("in" NL
	//
	//	(variants+=[VariantDefinition|QualifiedName] NL)+)?;
	public SuiteElements getSuiteAccess() {
		return (pSuite != null) ? pSuite : (pSuite = new SuiteElements());
	}
	
	public ParserRule getSuiteRule() {
		return getSuiteAccess().getRule();
	}

	//SuiteParameter:
	//
	//	name=[VariableEntity|QualifiedName] NL ":" NL value=Value;
	public SuiteParameterElements getSuiteParameterAccess() {
		return (pSuiteParameter != null) ? pSuiteParameter : (pSuiteParameter = new SuiteParameterElements());
	}
	
	public ParserRule getSuiteParameterRule() {
		return getSuiteParameterAccess().getRule();
	}

	//Parameter:
	//
	//	name=ParameterName NL ":" NL value=ValueOrEnumValueOrOperationCollection;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//ParameterName:
	//
	//	FixedParameterName | ArbitraryParameterOrResultName;
	public ParameterNameElements getParameterNameAccess() {
		return (pParameterName != null) ? pParameterName : (pParameterName = new ParameterNameElements());
	}
	
	public ParserRule getParameterNameRule() {
		return getParameterNameAccess().getRule();
	}

	//FixedParameterName:
	//
	//	annotation=[jvmTypes::JvmAnnotationReference];
	public FixedParameterNameElements getFixedParameterNameAccess() {
		return (pFixedParameterName != null) ? pFixedParameterName : (pFixedParameterName = new FixedParameterNameElements());
	}
	
	public ParserRule getFixedParameterNameRule() {
		return getFixedParameterNameAccess().getRule();
	}

	//ArbitraryParameterOrResultName:
	//
	//	"+" identifier=ID;
	public ArbitraryParameterOrResultNameElements getArbitraryParameterOrResultNameAccess() {
		return (pArbitraryParameterOrResultName != null) ? pArbitraryParameterOrResultName : (pArbitraryParameterOrResultName = new ArbitraryParameterOrResultNameElements());
	}
	
	public ParserRule getArbitraryParameterOrResultNameRule() {
		return getArbitraryParameterOrResultNameAccess().getRule();
	}

	//Operation:
	//
	//	StandardOperation | CustomOperation;
	public OperationElements getOperationAccess() {
		return (pOperation != null) ? pOperation : (pOperation = new OperationElements());
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}

	//StandardOperation:
	//
	//	"(" NL firstOperand=ValueOrEnumValueOrOperation NL (operators+=("+" | "-" | "*" | "/" | "%" | "..") NL
	//
	//	moreOperands+=ValueOrEnumValueOrOperation NL)+ ")";
	public StandardOperationElements getStandardOperationAccess() {
		return (pStandardOperation != null) ? pStandardOperation : (pStandardOperation = new StandardOperationElements());
	}
	
	public ParserRule getStandardOperationRule() {
		return getStandardOperationAccess().getRule();
	}

	//CustomOperation:
	//
	//	"[" NL (prefixOperand=ValueOrEnumValueOrOperationCollection NL)? definition=[OperationDefinition|QualifiedName] (NL
	//
	//	"with" postfixOperand=ValueOrEnumValueOrOperationCollection)? NL "]";
	public CustomOperationElements getCustomOperationAccess() {
		return (pCustomOperation != null) ? pCustomOperation : (pCustomOperation = new CustomOperationElements());
	}
	
	public ParserRule getCustomOperationRule() {
		return getCustomOperationAccess().getRule();
	}

	//ValueOrEnumValueOrOperationCollection:
	//
	//	value=ValueOrEnumValueOrOperation (NL "," NL moreValues+=ValueOrEnumValueOrOperation)*;
	public ValueOrEnumValueOrOperationCollectionElements getValueOrEnumValueOrOperationCollectionAccess() {
		return (pValueOrEnumValueOrOperationCollection != null) ? pValueOrEnumValueOrOperationCollection : (pValueOrEnumValueOrOperationCollection = new ValueOrEnumValueOrOperationCollectionElements());
	}
	
	public ParserRule getValueOrEnumValueOrOperationCollectionRule() {
		return getValueOrEnumValueOrOperationCollectionAccess().getRule();
	}

	//ValueOrEnumValueOrOperation:
	//
	//	Value | EnumValue | Operation;
	public ValueOrEnumValueOrOperationElements getValueOrEnumValueOrOperationAccess() {
		return (pValueOrEnumValueOrOperation != null) ? pValueOrEnumValueOrOperation : (pValueOrEnumValueOrOperation = new ValueOrEnumValueOrOperationElements());
	}
	
	public ParserRule getValueOrEnumValueOrOperationRule() {
		return getValueOrEnumValueOrOperationAccess().getRule();
	}

	//Value:
	//
	//	StaticValue | Variable | NestedObject;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//StaticValue:
	//
	//	StringValue | IntegerValue | DecimalValue | BooleanValue | DateValue | TimeValue | DateAndTimeValue | NullValue;
	public StaticValueElements getStaticValueAccess() {
		return (pStaticValue != null) ? pStaticValue : (pStaticValue = new StaticValueElements());
	}
	
	public ParserRule getStaticValueRule() {
		return getStaticValueAccess().getRule();
	}

	//IntegerValue:
	//
	//	integerValue=INTEGER;
	public IntegerValueElements getIntegerValueAccess() {
		return (pIntegerValue != null) ? pIntegerValue : (pIntegerValue = new IntegerValueElements());
	}
	
	public ParserRule getIntegerValueRule() {
		return getIntegerValueAccess().getRule();
	}

	//DecimalValue:
	//
	//	decimalValue=DECIMAL;
	public DecimalValueElements getDecimalValueAccess() {
		return (pDecimalValue != null) ? pDecimalValue : (pDecimalValue = new DecimalValueElements());
	}
	
	public ParserRule getDecimalValueRule() {
		return getDecimalValueAccess().getRule();
	}

	//StringValue:
	//
	//	stringValue=STRING;
	public StringValueElements getStringValueAccess() {
		return (pStringValue != null) ? pStringValue : (pStringValue = new StringValueElements());
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//BooleanValue:
	//
	//	booleanValue=(BOOLEAN_TRUE | BOOLEAN_FALSE);
	public BooleanValueElements getBooleanValueAccess() {
		return (pBooleanValue != null) ? pBooleanValue : (pBooleanValue = new BooleanValueElements());
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}

	//DateValue:
	//
	//	IsoDateValue | EuropeanDateValue | USDateValue;
	public DateValueElements getDateValueAccess() {
		return (pDateValue != null) ? pDateValue : (pDateValue = new DateValueElements());
	}
	
	public ParserRule getDateValueRule() {
		return getDateValueAccess().getRule();
	}

	//IsoDateValue:
	//
	//	dateValue=ISODATE;
	public IsoDateValueElements getIsoDateValueAccess() {
		return (pIsoDateValue != null) ? pIsoDateValue : (pIsoDateValue = new IsoDateValueElements());
	}
	
	public ParserRule getIsoDateValueRule() {
		return getIsoDateValueAccess().getRule();
	}

	//EuropeanDateValue:
	//
	//	dateValue=EURODATE;
	public EuropeanDateValueElements getEuropeanDateValueAccess() {
		return (pEuropeanDateValue != null) ? pEuropeanDateValue : (pEuropeanDateValue = new EuropeanDateValueElements());
	}
	
	public ParserRule getEuropeanDateValueRule() {
		return getEuropeanDateValueAccess().getRule();
	}

	//USDateValue:
	//
	//	dateValue=USDATE;
	public USDateValueElements getUSDateValueAccess() {
		return (pUSDateValue != null) ? pUSDateValue : (pUSDateValue = new USDateValueElements());
	}
	
	public ParserRule getUSDateValueRule() {
		return getUSDateValueAccess().getRule();
	}

	//TimeValue:
	//
	//	IsoTimeValue | Simple24HrsTimeValue | Simple12HrsTimeValue;
	public TimeValueElements getTimeValueAccess() {
		return (pTimeValue != null) ? pTimeValue : (pTimeValue = new TimeValueElements());
	}
	
	public ParserRule getTimeValueRule() {
		return getTimeValueAccess().getRule();
	}

	//IsoTimeValue:
	//
	//	timeValue=ISOTIME;
	public IsoTimeValueElements getIsoTimeValueAccess() {
		return (pIsoTimeValue != null) ? pIsoTimeValue : (pIsoTimeValue = new IsoTimeValueElements());
	}
	
	public ParserRule getIsoTimeValueRule() {
		return getIsoTimeValueAccess().getRule();
	}

	//Simple24HrsTimeValue:
	//
	//	timeValue=TWENTYFOURHRSTIME;
	public Simple24HrsTimeValueElements getSimple24HrsTimeValueAccess() {
		return (pSimple24HrsTimeValue != null) ? pSimple24HrsTimeValue : (pSimple24HrsTimeValue = new Simple24HrsTimeValueElements());
	}
	
	public ParserRule getSimple24HrsTimeValueRule() {
		return getSimple24HrsTimeValueAccess().getRule();
	}

	//Simple12HrsTimeValue:
	//
	//	timeValue=TWELVEHRSTIME;
	public Simple12HrsTimeValueElements getSimple12HrsTimeValueAccess() {
		return (pSimple12HrsTimeValue != null) ? pSimple12HrsTimeValue : (pSimple12HrsTimeValue = new Simple12HrsTimeValueElements());
	}
	
	public ParserRule getSimple12HrsTimeValueRule() {
		return getSimple12HrsTimeValueAccess().getRule();
	}

	//DateAndTimeValue:
	//
	//	IsoDateAndTimeValue | EuropeanDateAnd24HrsTimeValue | EuropeanDateAnd12HrsTimeValue | USDateAnd12HrsTimeValue;
	public DateAndTimeValueElements getDateAndTimeValueAccess() {
		return (pDateAndTimeValue != null) ? pDateAndTimeValue : (pDateAndTimeValue = new DateAndTimeValueElements());
	}
	
	public ParserRule getDateAndTimeValueRule() {
		return getDateAndTimeValueAccess().getRule();
	}

	//IsoDateAndTimeValue:
	//
	//	dateValue=ISODATE timeValue=ISOTIME;
	public IsoDateAndTimeValueElements getIsoDateAndTimeValueAccess() {
		return (pIsoDateAndTimeValue != null) ? pIsoDateAndTimeValue : (pIsoDateAndTimeValue = new IsoDateAndTimeValueElements());
	}
	
	public ParserRule getIsoDateAndTimeValueRule() {
		return getIsoDateAndTimeValueAccess().getRule();
	}

	//EuropeanDateAnd24HrsTimeValue:
	//
	//	dateValue=EURODATE NL timeValue=TWENTYFOURHRSTIME;
	public EuropeanDateAnd24HrsTimeValueElements getEuropeanDateAnd24HrsTimeValueAccess() {
		return (pEuropeanDateAnd24HrsTimeValue != null) ? pEuropeanDateAnd24HrsTimeValue : (pEuropeanDateAnd24HrsTimeValue = new EuropeanDateAnd24HrsTimeValueElements());
	}
	
	public ParserRule getEuropeanDateAnd24HrsTimeValueRule() {
		return getEuropeanDateAnd24HrsTimeValueAccess().getRule();
	}

	//EuropeanDateAnd12HrsTimeValue:
	//
	//	dateValue=EURODATE NL timeValue=TWELVEHRSTIME;
	public EuropeanDateAnd12HrsTimeValueElements getEuropeanDateAnd12HrsTimeValueAccess() {
		return (pEuropeanDateAnd12HrsTimeValue != null) ? pEuropeanDateAnd12HrsTimeValue : (pEuropeanDateAnd12HrsTimeValue = new EuropeanDateAnd12HrsTimeValueElements());
	}
	
	public ParserRule getEuropeanDateAnd12HrsTimeValueRule() {
		return getEuropeanDateAnd12HrsTimeValueAccess().getRule();
	}

	//USDateAnd12HrsTimeValue:
	//
	//	dateValue=USDATE NL timeValue=TWELVEHRSTIME;
	public USDateAnd12HrsTimeValueElements getUSDateAnd12HrsTimeValueAccess() {
		return (pUSDateAnd12HrsTimeValue != null) ? pUSDateAnd12HrsTimeValue : (pUSDateAnd12HrsTimeValue = new USDateAnd12HrsTimeValueElements());
	}
	
	public ParserRule getUSDateAnd12HrsTimeValueRule() {
		return getUSDateAnd12HrsTimeValueAccess().getRule();
	}

	//Variable:
	//
	//	name=[VariableEntity|QualifiedName];
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//NullValue:
	//
	//	{Null} "null";
	public NullValueElements getNullValueAccess() {
		return (pNullValue != null) ? pNullValue : (pNullValue = new NullValueElements());
	}
	
	public ParserRule getNullValueRule() {
		return getNullValueAccess().getRule();
	}

	//EnumValue:
	//
	//	enumValue=[jvmTypes::JvmEnumerationLiteral|UPPERCASE_ID];
	public EnumValueElements getEnumValueAccess() {
		return (pEnumValue != null) ? pEnumValue : (pEnumValue = new EnumValueElements());
	}
	
	public ParserRule getEnumValueRule() {
		return getEnumValueAccess().getRule();
	}

	//NestedObject:
	//
	//	"{" NL (attributes+=KeyValuePair NL)+ "}";
	public NestedObjectElements getNestedObjectAccess() {
		return (pNestedObject != null) ? pNestedObject : (pNestedObject = new NestedObjectElements());
	}
	
	public ParserRule getNestedObjectRule() {
		return getNestedObjectAccess().getRule();
	}

	//KeyValuePair:
	//
	//	identifier=ID NL ":" NL value=ValueOrEnumValueOrOperationCollection;
	public KeyValuePairElements getKeyValuePairAccess() {
		return (pKeyValuePair != null) ? pKeyValuePair : (pKeyValuePair = new KeyValuePairElements());
	}
	
	public ParserRule getKeyValuePairRule() {
		return getKeyValuePairAccess().getRule();
	}

	//JavaClassReference:
	//
	//	type=[jvmTypes::JvmType|QualifiedJavaClassName];
	public JavaClassReferenceElements getJavaClassReferenceAccess() {
		return (pJavaClassReference != null) ? pJavaClassReference : (pJavaClassReference = new JavaClassReferenceElements());
	}
	
	public ParserRule getJavaClassReferenceRule() {
		return getJavaClassReferenceAccess().getRule();
	}

	//MethodReference:
	//
	//	type=[jvmTypes::JvmType|QualifiedJavaClassName] "#" method=[jvmTypes::JvmOperation];
	public MethodReferenceElements getMethodReferenceAccess() {
		return (pMethodReference != null) ? pMethodReference : (pMethodReference = new MethodReferenceElements());
	}
	
	public ParserRule getMethodReferenceRule() {
		return getMethodReferenceAccess().getRule();
	}

	//ExecutionMultiplier:
	//
	//	count=INTEGER "*";
	public ExecutionMultiplierElements getExecutionMultiplierAccess() {
		return (pExecutionMultiplier != null) ? pExecutionMultiplier : (pExecutionMultiplier = new ExecutionMultiplierElements());
	}
	
	public ParserRule getExecutionMultiplierRule() {
		return getExecutionMultiplierAccess().getRule();
	}

	//QualifiedName:
	//
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//QualifiedJavaClassName:
	//
	//	QualifiedName "." UPPERCASE_ID;
	public QualifiedJavaClassNameElements getQualifiedJavaClassNameAccess() {
		return (pQualifiedJavaClassName != null) ? pQualifiedJavaClassName : (pQualifiedJavaClassName = new QualifiedJavaClassNameElements());
	}
	
	public ParserRule getQualifiedJavaClassNameRule() {
		return getQualifiedJavaClassNameAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//NL:
	//
	//	(NEWLINE WS?)*;
	public NLElements getNLAccess() {
		return (pNL != null) ? pNL : (pNL = new NLElements());
	}
	
	public ParserRule getNLRule() {
		return getNLAccess().getRule();
	}

	//NLFORCED:
	//
	//	NEWLINE WS? NL;
	public NLFORCEDElements getNLFORCEDAccess() {
		return (pNLFORCED != null) ? pNLFORCED : (pNLFORCED = new NLFORCEDElements());
	}
	
	public ParserRule getNLFORCEDRule() {
		return getNLFORCEDAccess().getRule();
	}

	//terminal BOOLEAN_TRUE:
	//
	//	"true";
	public TerminalRule getBOOLEAN_TRUERule() {
		return (tBOOLEAN_TRUE != null) ? tBOOLEAN_TRUE : (tBOOLEAN_TRUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN_TRUE"));
	} 

	//terminal BOOLEAN_FALSE:
	//
	//	"false";
	public TerminalRule getBOOLEAN_FALSERule() {
		return (tBOOLEAN_FALSE != null) ? tBOOLEAN_FALSE : (tBOOLEAN_FALSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN_FALSE"));
	} 

	//terminal UPPERCASE_ID:
	//
	//	"A".."Z" ("A".."Z" | "a".."z" | "_" | "0".."9")*;
	public TerminalRule getUPPERCASE_IDRule() {
		return (tUPPERCASE_ID != null) ? tUPPERCASE_ID : (tUPPERCASE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UPPERCASE_ID"));
	} 

	//terminal ID:
	//
	//	"^"? ("a".."z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INTEGER returns ecore::EBigInteger:
	//
	//	"-"? "0".."9"+;
	public TerminalRule getINTEGERRule() {
		return (tINTEGER != null) ? tINTEGER : (tINTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INTEGER"));
	} 

	//terminal DECIMAL returns ecore::EBigDecimal:
	//
	//	"-"? "0".."9"+ "." "0".."9"+;
	public TerminalRule getDECIMALRule() {
		return (tDECIMAL != null) ? tDECIMAL : (tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DECIMAL"));
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal SL_VISIBLE_COMMENT:
	//
	//	"-- " !("\n" | "\r")*;
	public TerminalRule getSL_VISIBLE_COMMENTRule() {
		return (tSL_VISIBLE_COMMENT != null) ? tSL_VISIBLE_COMMENT : (tSL_VISIBLE_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_VISIBLE_COMMENT"));
	} 

	//terminal ML_VISIBLE_COMMENT:
	//
	//	"/-"->"-/";
	public TerminalRule getML_VISIBLE_COMMENTRule() {
		return (tML_VISIBLE_COMMENT != null) ? tML_VISIBLE_COMMENT : (tML_VISIBLE_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_VISIBLE_COMMENT"));
	} 

	//terminal DIVIDER:
	//
	//	"---" "-"*;
	public TerminalRule getDIVIDERRule() {
		return (tDIVIDER != null) ? tDIVIDER : (tDIVIDER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DIVIDER"));
	} 

	//terminal WS:
	//
	//	(" " | "\t")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal NEWLINE:
	//
	//	("\r" | "\n")+;
	public TerminalRule getNEWLINERule() {
		return (tNEWLINE != null) ? tNEWLINE : (tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NEWLINE"));
	} 

	//terminal ISODATE:
	//
	//	"0".."9" "0".."9" "0".."9" "0".."9" "-" "0".."1" "0".."9" "-" "0".."3" "0".."9";
	public TerminalRule getISODATERule() {
		return (tISODATE != null) ? tISODATE : (tISODATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ISODATE"));
	} 

	//terminal ISOTIME:
	//
	//	"T" TWENTYFOURHRSTIME ISOTIMEZONE? | TWENTYFOURHRSTIME ISOTIMEZONE;
	public TerminalRule getISOTIMERule() {
		return (tISOTIME != null) ? tISOTIME : (tISOTIME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ISOTIME"));
	} 

	//terminal ISOTIMEZONE:
	//
	//	"Z" | ("+" | "-") "0".."2" "0".."9" ":"? "0".."5" "0".."9";
	public TerminalRule getISOTIMEZONERule() {
		return (tISOTIMEZONE != null) ? tISOTIMEZONE : (tISOTIMEZONE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ISOTIMEZONE"));
	} 

	//terminal EURODATE:
	//
	//	"0".."3" "0".."9" "." "0".."1" "0".."9" "." "0".."9" "0".."9" "0".."9" "0".."9";
	public TerminalRule getEURODATERule() {
		return (tEURODATE != null) ? tEURODATE : (tEURODATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EURODATE"));
	} 

	//terminal USDATE:
	//
	//	"0".."1" "0".."9" "/" "0".."3" "0".."9" "/" "0".."9" "0".."9" "0".."9" "0".."9";
	public TerminalRule getUSDATERule() {
		return (tUSDATE != null) ? tUSDATE : (tUSDATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "USDATE"));
	} 

	//terminal TWENTYFOURHRSTIME:
	//
	//	"0".."2" "0".."9" ":" "0".."5" "0".."9" (":" "0".."6" "0".."9")?;
	public TerminalRule getTWENTYFOURHRSTIMERule() {
		return (tTWENTYFOURHRSTIME != null) ? tTWENTYFOURHRSTIME : (tTWENTYFOURHRSTIME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TWENTYFOURHRSTIME"));
	} 

	//terminal TWELVEHRSTIME:
	//
	//	"0".."1" "0".."9" ":" "0".."5" "0".."9" (":" "0".."6" "0".."9")? ("am" | "pm");
	public TerminalRule getTWELVEHRSTIMERule() {
		return (tTWELVEHRSTIME != null) ? tTWELVEHRSTIME : (tTWELVEHRSTIME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TWELVEHRSTIME"));
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
