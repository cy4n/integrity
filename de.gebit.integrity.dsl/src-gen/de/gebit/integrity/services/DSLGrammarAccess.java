/*
* generated by Xtext
*/

package de.gebit.integrity.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class DSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//Model:
		//	statements+=Statement*;
		public ParserRule getRule() { return rule; }

		//statements+=Statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPackageDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cImportParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSuiteParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Statement:
		//	PackageDefinition | Import | Suite;
		public ParserRule getRule() { return rule; }

		//PackageDefinition | Import | Suite
		public Alternatives getAlternatives() { return cAlternatives; }

		//PackageDefinition
		public RuleCall getPackageDefinitionParserRuleCall_0() { return cPackageDefinitionParserRuleCall_0; }

		//Import
		public RuleCall getImportParserRuleCall_1() { return cImportParserRuleCall_1; }

		//Suite
		public RuleCall getSuiteParserRuleCall_2() { return cSuiteParserRuleCall_2; }
	}

	public class VisibleSingleLineCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VisibleSingleLineComment");
		private final Assignment cContentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cContentSL_VISIBLE_COMMENTTerminalRuleCall_0 = (RuleCall)cContentAssignment.eContents().get(0);
		
		//VisibleSingleLineComment:
		//	content=SL_VISIBLE_COMMENT;
		public ParserRule getRule() { return rule; }

		//content=SL_VISIBLE_COMMENT
		public Assignment getContentAssignment() { return cContentAssignment; }

		//SL_VISIBLE_COMMENT
		public RuleCall getContentSL_VISIBLE_COMMENTTerminalRuleCall_0() { return cContentSL_VISIBLE_COMMENTTerminalRuleCall_0; }
	}

	public class VisibleMultiLineCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VisibleMultiLineComment");
		private final Assignment cContentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cContentML_VISIBLE_COMMENTTerminalRuleCall_0 = (RuleCall)cContentAssignment.eContents().get(0);
		
		//VisibleMultiLineComment:
		//	content=ML_VISIBLE_COMMENT;
		public ParserRule getRule() { return rule; }

		//content=ML_VISIBLE_COMMENT
		public Assignment getContentAssignment() { return cContentAssignment; }

		//ML_VISIBLE_COMMENT
		public RuleCall getContentML_VISIBLE_COMMENTTerminalRuleCall_0() { return cContentML_VISIBLE_COMMENTTerminalRuleCall_0; }
	}

	public class PackageDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackagedefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsPackageStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Keyword cPackageendKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PackageDefinition:
		//	"packagedef" name=QualifiedName "with" statements+=PackageStatement* "packageend";
		public ParserRule getRule() { return rule; }

		//"packagedef" name=QualifiedName "with" statements+=PackageStatement* "packageend"
		public Group getGroup() { return cGroup; }

		//"packagedef"
		public Keyword getPackagedefKeyword_0() { return cPackagedefKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"with"
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }

		//statements+=PackageStatement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }

		//PackageStatement
		public RuleCall getStatementsPackageStatementParserRuleCall_3_0() { return cStatementsPackageStatementParserRuleCall_3_0; }

		//"packageend"
		public Keyword getPackageendKeyword_4() { return cPackageendKeyword_4; }
	}

	public class PackageStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForkDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTestDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCallDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSuiteDefinitionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cVariableDefinitionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//PackageStatement:
		//	Import | ForkDefinition | TestDefinition | CallDefinition | SuiteDefinition | VariableDefinition;
		public ParserRule getRule() { return rule; }

		//Import | ForkDefinition | TestDefinition | CallDefinition | SuiteDefinition | VariableDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//Import
		public RuleCall getImportParserRuleCall_0() { return cImportParserRuleCall_0; }

		//ForkDefinition
		public RuleCall getForkDefinitionParserRuleCall_1() { return cForkDefinitionParserRuleCall_1; }

		//TestDefinition
		public RuleCall getTestDefinitionParserRuleCall_2() { return cTestDefinitionParserRuleCall_2; }

		//CallDefinition
		public RuleCall getCallDefinitionParserRuleCall_3() { return cCallDefinitionParserRuleCall_3; }

		//SuiteDefinition
		public RuleCall getSuiteDefinitionParserRuleCall_4() { return cSuiteDefinitionParserRuleCall_4; }

		//VariableDefinition
		public RuleCall getVariableDefinitionParserRuleCall_5() { return cVariableDefinitionParserRuleCall_5; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=QualifiedNameWithWildcard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}

	public class ForkDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForkDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForkdefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ForkDefinition:
		//	"forkdef" name=QualifiedName;
		public ParserRule getRule() { return rule; }

		//"forkdef" name=QualifiedName
		public Group getGroup() { return cGroup; }

		//"forkdef"
		public Keyword getForkdefKeyword_0() { return cForkdefKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}

	public class TestDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TestDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestdefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cUsesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFixtureMethodAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFixtureMethodMethodReferenceParserRuleCall_3_0 = (RuleCall)cFixtureMethodAssignment_3.eContents().get(0);
		
		//TestDefinition:
		//	"testdef" name=QualifiedName "uses" fixtureMethod=MethodReference;
		public ParserRule getRule() { return rule; }

		//"testdef" name=QualifiedName "uses" fixtureMethod=MethodReference
		public Group getGroup() { return cGroup; }

		//"testdef"
		public Keyword getTestdefKeyword_0() { return cTestdefKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"uses"
		public Keyword getUsesKeyword_2() { return cUsesKeyword_2; }

		//fixtureMethod=MethodReference
		public Assignment getFixtureMethodAssignment_3() { return cFixtureMethodAssignment_3; }

		//MethodReference
		public RuleCall getFixtureMethodMethodReferenceParserRuleCall_3_0() { return cFixtureMethodMethodReferenceParserRuleCall_3_0; }
	}

	public class CallDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CallDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCalldefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cUsesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFixtureMethodAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFixtureMethodMethodReferenceParserRuleCall_3_0 = (RuleCall)cFixtureMethodAssignment_3.eContents().get(0);
		
		//CallDefinition:
		//	"calldef" name=QualifiedName "uses" fixtureMethod=MethodReference;
		public ParserRule getRule() { return rule; }

		//"calldef" name=QualifiedName "uses" fixtureMethod=MethodReference
		public Group getGroup() { return cGroup; }

		//"calldef"
		public Keyword getCalldefKeyword_0() { return cCalldefKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"uses"
		public Keyword getUsesKeyword_2() { return cUsesKeyword_2; }

		//fixtureMethod=MethodReference
		public Assignment getFixtureMethodAssignment_3() { return cFixtureMethodAssignment_3; }

		//MethodReference
		public RuleCall getFixtureMethodMethodReferenceParserRuleCall_3_0() { return cFixtureMethodMethodReferenceParserRuleCall_3_0; }
	}

	public class SuiteDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SuiteDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSuitedefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cGetsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersVariableEntityParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cRequiresKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDependenciesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cDependenciesSuiteDefinitionCrossReference_3_1_0 = (CrossReference)cDependenciesAssignment_3_1.eContents().get(0);
		private final RuleCall cDependenciesSuiteDefinitionQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cDependenciesSuiteDefinitionCrossReference_3_1_0.eContents().get(1);
		private final Keyword cWithKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsSuiteStatementParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Keyword cSuiteendKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cConcludedbyKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cFinalizersAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cFinalizersSuiteDefinitionCrossReference_7_1_0 = (CrossReference)cFinalizersAssignment_7_1.eContents().get(0);
		private final RuleCall cFinalizersSuiteDefinitionQualifiedNameParserRuleCall_7_1_0_1 = (RuleCall)cFinalizersSuiteDefinitionCrossReference_7_1_0.eContents().get(1);
		
		//SuiteDefinition:
		//	"suitedef" name=QualifiedName ("gets" parameters+=VariableEntity*)? ("requires"
		//	dependencies+=[SuiteDefinition|QualifiedName]*)? "with" statements+=SuiteStatement* "suiteend" ("concludedby"
		//	finalizers+=[SuiteDefinition|QualifiedName]*)?;
		public ParserRule getRule() { return rule; }

		//"suitedef" name=QualifiedName ("gets" parameters+=VariableEntity*)? ("requires"
		//dependencies+=[SuiteDefinition|QualifiedName]*)? "with" statements+=SuiteStatement* "suiteend" ("concludedby"
		//finalizers+=[SuiteDefinition|QualifiedName]*)?
		public Group getGroup() { return cGroup; }

		//"suitedef"
		public Keyword getSuitedefKeyword_0() { return cSuitedefKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//("gets" parameters+=VariableEntity*)?
		public Group getGroup_2() { return cGroup_2; }

		//"gets"
		public Keyword getGetsKeyword_2_0() { return cGetsKeyword_2_0; }

		//parameters+=VariableEntity*
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }

		//VariableEntity
		public RuleCall getParametersVariableEntityParserRuleCall_2_1_0() { return cParametersVariableEntityParserRuleCall_2_1_0; }

		//("requires" dependencies+=[SuiteDefinition|QualifiedName]*)?
		public Group getGroup_3() { return cGroup_3; }

		//"requires"
		public Keyword getRequiresKeyword_3_0() { return cRequiresKeyword_3_0; }

		//dependencies+=[SuiteDefinition|QualifiedName]*
		public Assignment getDependenciesAssignment_3_1() { return cDependenciesAssignment_3_1; }

		//[SuiteDefinition|QualifiedName]
		public CrossReference getDependenciesSuiteDefinitionCrossReference_3_1_0() { return cDependenciesSuiteDefinitionCrossReference_3_1_0; }

		//QualifiedName
		public RuleCall getDependenciesSuiteDefinitionQualifiedNameParserRuleCall_3_1_0_1() { return cDependenciesSuiteDefinitionQualifiedNameParserRuleCall_3_1_0_1; }

		//"with"
		public Keyword getWithKeyword_4() { return cWithKeyword_4; }

		//statements+=SuiteStatement*
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }

		//SuiteStatement
		public RuleCall getStatementsSuiteStatementParserRuleCall_5_0() { return cStatementsSuiteStatementParserRuleCall_5_0; }

		//"suiteend"
		public Keyword getSuiteendKeyword_6() { return cSuiteendKeyword_6; }

		//("concludedby" finalizers+=[SuiteDefinition|QualifiedName]*)?
		public Group getGroup_7() { return cGroup_7; }

		//"concludedby"
		public Keyword getConcludedbyKeyword_7_0() { return cConcludedbyKeyword_7_0; }

		//finalizers+=[SuiteDefinition|QualifiedName]*
		public Assignment getFinalizersAssignment_7_1() { return cFinalizersAssignment_7_1; }

		//[SuiteDefinition|QualifiedName]
		public CrossReference getFinalizersSuiteDefinitionCrossReference_7_1_0() { return cFinalizersSuiteDefinitionCrossReference_7_1_0; }

		//QualifiedName
		public RuleCall getFinalizersSuiteDefinitionQualifiedNameParserRuleCall_7_1_0_1() { return cFinalizersSuiteDefinitionQualifiedNameParserRuleCall_7_1_0_1; }
	}

	public class SuiteStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SuiteStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSuiteStatementWithResultParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVisibleSingleLineCommentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVisibleMultiLineCommentParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//SuiteStatement:
		//	SuiteStatementWithResult | Call | VariableDefinition | VisibleSingleLineComment | VisibleMultiLineComment;
		public ParserRule getRule() { return rule; }

		//SuiteStatementWithResult | Call | VariableDefinition | VisibleSingleLineComment | VisibleMultiLineComment
		public Alternatives getAlternatives() { return cAlternatives; }

		//SuiteStatementWithResult
		public RuleCall getSuiteStatementWithResultParserRuleCall_0() { return cSuiteStatementWithResultParserRuleCall_0; }

		//Call
		public RuleCall getCallParserRuleCall_1() { return cCallParserRuleCall_1; }

		//VariableDefinition
		public RuleCall getVariableDefinitionParserRuleCall_2() { return cVariableDefinitionParserRuleCall_2; }

		//VisibleSingleLineComment
		public RuleCall getVisibleSingleLineCommentParserRuleCall_3() { return cVisibleSingleLineCommentParserRuleCall_3; }

		//VisibleMultiLineComment
		public RuleCall getVisibleMultiLineCommentParserRuleCall_4() { return cVisibleMultiLineCommentParserRuleCall_4; }
	}

	public class SuiteStatementWithResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SuiteStatementWithResult");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSuiteParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTestParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTableTestParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SuiteStatementWithResult:
		//	Suite | Test | TableTest;
		public ParserRule getRule() { return rule; }

		//Suite | Test | TableTest
		public Alternatives getAlternatives() { return cAlternatives; }

		//Suite
		public RuleCall getSuiteParserRuleCall_0() { return cSuiteParserRuleCall_0; }

		//Test
		public RuleCall getTestParserRuleCall_1() { return cTestParserRuleCall_1; }

		//TableTest
		public RuleCall getTableTestParserRuleCall_2() { return cTableTestParserRuleCall_2; }
	}

	public class VariableDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVariableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVariableEntityParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInitiallyKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInitialValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInitialValueValueParserRuleCall_2_1_0 = (RuleCall)cInitialValueAssignment_2_1.eContents().get(0);
		
		//VariableDefinition:
		//	"variable" name=VariableEntity ("initially" initialValue=Value)?;
		public ParserRule getRule() { return rule; }

		//"variable" name=VariableEntity ("initially" initialValue=Value)?
		public Group getGroup() { return cGroup; }

		//"variable"
		public Keyword getVariableKeyword_0() { return cVariableKeyword_0; }

		//name=VariableEntity
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//VariableEntity
		public RuleCall getNameVariableEntityParserRuleCall_1_0() { return cNameVariableEntityParserRuleCall_1_0; }

		//("initially" initialValue=Value)?
		public Group getGroup_2() { return cGroup_2; }

		//"initially"
		public Keyword getInitiallyKeyword_2_0() { return cInitiallyKeyword_2_0; }

		//initialValue=Value
		public Assignment getInitialValueAssignment_2_1() { return cInitialValueAssignment_2_1; }

		//Value
		public RuleCall getInitialValueValueParserRuleCall_2_1_0() { return cInitialValueValueParserRuleCall_2_1_0; }
	}

	public class VariableEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableEntity");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//VariableEntity:
		//	name=QualifiedName;
		public ParserRule getRule() { return rule; }

		//name=QualifiedName
		public Assignment getNameAssignment() { return cNameAssignment; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0() { return cNameQualifiedNameParserRuleCall_0; }
	}

	public class TestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Test");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDefinitionTestDefinitionCrossReference_1_0 = (CrossReference)cDefinitionAssignment_1.eContents().get(0);
		private final RuleCall cDefinitionTestDefinitionQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cDefinitionTestDefinitionCrossReference_1_0.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersParameterParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Assignment cResultsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cResultsNamedResultParserRuleCall_3_0 = (RuleCall)cResultsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cResultAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cResultValueOrEnumValueParserRuleCall_4_1_0 = (RuleCall)cResultAssignment_4_1.eContents().get(0);
		
		//Test:
		//	"test" definition=[TestDefinition|QualifiedName] parameters+=Parameter* results+=NamedResult* ("="
		//	result=ValueOrEnumValue)?;
		public ParserRule getRule() { return rule; }

		//"test" definition=[TestDefinition|QualifiedName] parameters+=Parameter* results+=NamedResult* ("="
		//result=ValueOrEnumValue)?
		public Group getGroup() { return cGroup; }

		//"test"
		public Keyword getTestKeyword_0() { return cTestKeyword_0; }

		//definition=[TestDefinition|QualifiedName]
		public Assignment getDefinitionAssignment_1() { return cDefinitionAssignment_1; }

		//[TestDefinition|QualifiedName]
		public CrossReference getDefinitionTestDefinitionCrossReference_1_0() { return cDefinitionTestDefinitionCrossReference_1_0; }

		//QualifiedName
		public RuleCall getDefinitionTestDefinitionQualifiedNameParserRuleCall_1_0_1() { return cDefinitionTestDefinitionQualifiedNameParserRuleCall_1_0_1; }

		//parameters+=Parameter*
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_0() { return cParametersParameterParserRuleCall_2_0; }

		//results+=NamedResult*
		public Assignment getResultsAssignment_3() { return cResultsAssignment_3; }

		//NamedResult
		public RuleCall getResultsNamedResultParserRuleCall_3_0() { return cResultsNamedResultParserRuleCall_3_0; }

		//("=" result=ValueOrEnumValue)?
		public Group getGroup_4() { return cGroup_4; }

		//"="
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }

		//result=ValueOrEnumValue
		public Assignment getResultAssignment_4_1() { return cResultAssignment_4_1; }

		//ValueOrEnumValue
		public RuleCall getResultValueOrEnumValueParserRuleCall_4_1_0() { return cResultValueOrEnumValueParserRuleCall_4_1_0; }
	}

	public class TableTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTabletestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDefinitionTestDefinitionCrossReference_1_0 = (CrossReference)cDefinitionAssignment_1.eContents().get(0);
		private final RuleCall cDefinitionTestDefinitionQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cDefinitionTestDefinitionCrossReference_1_0.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersParameterParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Assignment cParameterHeadersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParameterHeadersParameterTableHeaderParserRuleCall_3_0 = (RuleCall)cParameterHeadersAssignment_3.eContents().get(0);
		private final Assignment cResultHeadersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cResultHeadersResultTableHeaderParserRuleCall_4_0 = (RuleCall)cResultHeadersAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cVerticalLineKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_5_0_1 = (Keyword)cGroup_5_0.eContents().get(1);
		private final Keyword cVerticalLineKeyword_5_0_2 = (Keyword)cGroup_5_0.eContents().get(2);
		private final Keyword cVerticalLineKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		private final Assignment cRowsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRowsTableTestRowParserRuleCall_6_0 = (RuleCall)cRowsAssignment_6.eContents().get(0);
		
		//TableTest:
		//	"tabletest" definition=[TestDefinition|QualifiedName] parameters+=Parameter* parameterHeaders+=ParameterTableHeader*
		//	resultHeaders+=ResultTableHeader* ("|" "=" "|" | "|") rows+=TableTestRow+;
		public ParserRule getRule() { return rule; }

		//"tabletest" definition=[TestDefinition|QualifiedName] parameters+=Parameter* parameterHeaders+=ParameterTableHeader*
		//resultHeaders+=ResultTableHeader* ("|" "=" "|" | "|") rows+=TableTestRow+
		public Group getGroup() { return cGroup; }

		//"tabletest"
		public Keyword getTabletestKeyword_0() { return cTabletestKeyword_0; }

		//definition=[TestDefinition|QualifiedName]
		public Assignment getDefinitionAssignment_1() { return cDefinitionAssignment_1; }

		//[TestDefinition|QualifiedName]
		public CrossReference getDefinitionTestDefinitionCrossReference_1_0() { return cDefinitionTestDefinitionCrossReference_1_0; }

		//QualifiedName
		public RuleCall getDefinitionTestDefinitionQualifiedNameParserRuleCall_1_0_1() { return cDefinitionTestDefinitionQualifiedNameParserRuleCall_1_0_1; }

		//parameters+=Parameter*
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_0() { return cParametersParameterParserRuleCall_2_0; }

		//parameterHeaders+=ParameterTableHeader*
		public Assignment getParameterHeadersAssignment_3() { return cParameterHeadersAssignment_3; }

		//ParameterTableHeader
		public RuleCall getParameterHeadersParameterTableHeaderParserRuleCall_3_0() { return cParameterHeadersParameterTableHeaderParserRuleCall_3_0; }

		//resultHeaders+=ResultTableHeader*
		public Assignment getResultHeadersAssignment_4() { return cResultHeadersAssignment_4; }

		//ResultTableHeader
		public RuleCall getResultHeadersResultTableHeaderParserRuleCall_4_0() { return cResultHeadersResultTableHeaderParserRuleCall_4_0; }

		//"|" "=" "|" | "|"
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"|" "=" "|"
		public Group getGroup_5_0() { return cGroup_5_0; }

		//"|"
		public Keyword getVerticalLineKeyword_5_0_0() { return cVerticalLineKeyword_5_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_5_0_1() { return cEqualsSignKeyword_5_0_1; }

		//"|"
		public Keyword getVerticalLineKeyword_5_0_2() { return cVerticalLineKeyword_5_0_2; }

		//"|"
		public Keyword getVerticalLineKeyword_5_1() { return cVerticalLineKeyword_5_1; }

		//rows+=TableTestRow+
		public Assignment getRowsAssignment_6() { return cRowsAssignment_6; }

		//TableTestRow
		public RuleCall getRowsTableTestRowParserRuleCall_6_0() { return cRowsTableTestRowParserRuleCall_6_0; }
	}

	public class TableTestRowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableTestRow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTableTestRowAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesParameterTableValueParserRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cResultAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cResultValueOrEnumValueParserRuleCall_2_0_2_0 = (RuleCall)cResultAssignment_2_0_2.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Keyword cVerticalLineKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//TableTestRow:
		//	{TableTestRow} values+=ParameterTableValue* ("|" "=" result=ValueOrEnumValue "|" | "|");
		public ParserRule getRule() { return rule; }

		//{TableTestRow} values+=ParameterTableValue* ("|" "=" result=ValueOrEnumValue "|" | "|")
		public Group getGroup() { return cGroup; }

		//{TableTestRow}
		public Action getTableTestRowAction_0() { return cTableTestRowAction_0; }

		//values+=ParameterTableValue*
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }

		//ParameterTableValue
		public RuleCall getValuesParameterTableValueParserRuleCall_1_0() { return cValuesParameterTableValueParserRuleCall_1_0; }

		//"|" "=" result=ValueOrEnumValue "|" | "|"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"|" "=" result=ValueOrEnumValue "|"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"|"
		public Keyword getVerticalLineKeyword_2_0_0() { return cVerticalLineKeyword_2_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_0_1() { return cEqualsSignKeyword_2_0_1; }

		//result=ValueOrEnumValue
		public Assignment getResultAssignment_2_0_2() { return cResultAssignment_2_0_2; }

		//ValueOrEnumValue
		public RuleCall getResultValueOrEnumValueParserRuleCall_2_0_2_0() { return cResultValueOrEnumValueParserRuleCall_2_0_2_0; }

		//"|"
		public Keyword getVerticalLineKeyword_2_0_3() { return cVerticalLineKeyword_2_0_3; }

		//"|"
		public Keyword getVerticalLineKeyword_2_1() { return cVerticalLineKeyword_2_1; }
	}

	public class ParameterTableHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterTableHeader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameParameterNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ParameterTableHeader:
		//	"|" name=ParameterName;
		public ParserRule getRule() { return rule; }

		//"|" name=ParameterName
		public Group getGroup() { return cGroup; }

		//"|"
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }

		//name=ParameterName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ParameterName
		public RuleCall getNameParameterNameParserRuleCall_1_0() { return cNameParameterNameParserRuleCall_1_0; }
	}

	public class ResultTableHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResultTableHeader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameResultNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ResultTableHeader:
		//	"|" name=ResultName "=";
		public ParserRule getRule() { return rule; }

		//"|" name=ResultName "="
		public Group getGroup() { return cGroup; }

		//"|"
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }

		//name=ResultName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ResultName
		public RuleCall getNameResultNameParserRuleCall_1_0() { return cNameResultNameParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
	}

	public class ParameterTableValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterTableValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueValueOrEnumValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ParameterTableValue:
		//	"|" value=ValueOrEnumValue;
		public ParserRule getRule() { return rule; }

		//"|" value=ValueOrEnumValue
		public Group getGroup() { return cGroup; }

		//"|"
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }

		//value=ValueOrEnumValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//ValueOrEnumValue
		public RuleCall getValueValueOrEnumValueParserRuleCall_1_0() { return cValueValueOrEnumValueParserRuleCall_1_0; }
	}

	public class NamedResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedResult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameResultNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueOrEnumValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//NamedResult:
		//	name=ResultName "=" value=ValueOrEnumValue;
		public ParserRule getRule() { return rule; }

		//name=ResultName "=" value=ValueOrEnumValue
		public Group getGroup() { return cGroup; }

		//name=ResultName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ResultName
		public RuleCall getNameResultNameParserRuleCall_0_0() { return cNameResultNameParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=ValueOrEnumValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//ValueOrEnumValue
		public RuleCall getValueValueOrEnumValueParserRuleCall_2_0() { return cValueValueOrEnumValueParserRuleCall_2_0; }
	}

	public class ResultNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResultName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFixedResultNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArbitraryParameterOrResultNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ResultName:
		//	FixedResultName | ArbitraryParameterOrResultName;
		public ParserRule getRule() { return rule; }

		//FixedResultName | ArbitraryParameterOrResultName
		public Alternatives getAlternatives() { return cAlternatives; }

		//FixedResultName
		public RuleCall getFixedResultNameParserRuleCall_0() { return cFixedResultNameParserRuleCall_0; }

		//ArbitraryParameterOrResultName
		public RuleCall getArbitraryParameterOrResultNameParserRuleCall_1() { return cArbitraryParameterOrResultNameParserRuleCall_1; }
	}

	public class FixedResultNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FixedResultName");
		private final Assignment cFieldAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cFieldJvmFieldCrossReference_0 = (CrossReference)cFieldAssignment.eContents().get(0);
		private final RuleCall cFieldJvmFieldIDTerminalRuleCall_0_1 = (RuleCall)cFieldJvmFieldCrossReference_0.eContents().get(1);
		
		//FixedResultName:
		//	field=[jvmTypes::JvmField];
		public ParserRule getRule() { return rule; }

		//field=[jvmTypes::JvmField]
		public Assignment getFieldAssignment() { return cFieldAssignment; }

		//[jvmTypes::JvmField]
		public CrossReference getFieldJvmFieldCrossReference_0() { return cFieldJvmFieldCrossReference_0; }

		//ID
		public RuleCall getFieldJvmFieldIDTerminalRuleCall_0_1() { return cFieldJvmFieldIDTerminalRuleCall_0_1; }
	}

	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Call");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDefinitionCallDefinitionCrossReference_1_0 = (CrossReference)cDefinitionAssignment_1.eContents().get(0);
		private final RuleCall cDefinitionCallDefinitionQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cDefinitionCallDefinitionCrossReference_1_0.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersParameterParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSetsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cResultAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cResultVariableParserRuleCall_3_1_0 = (RuleCall)cResultAssignment_3_1.eContents().get(0);
		
		//Call:
		//	"call" definition=[CallDefinition|QualifiedName] parameters+=Parameter* ("sets" result=Variable)?;
		public ParserRule getRule() { return rule; }

		//"call" definition=[CallDefinition|QualifiedName] parameters+=Parameter* ("sets" result=Variable)?
		public Group getGroup() { return cGroup; }

		//"call"
		public Keyword getCallKeyword_0() { return cCallKeyword_0; }

		//definition=[CallDefinition|QualifiedName]
		public Assignment getDefinitionAssignment_1() { return cDefinitionAssignment_1; }

		//[CallDefinition|QualifiedName]
		public CrossReference getDefinitionCallDefinitionCrossReference_1_0() { return cDefinitionCallDefinitionCrossReference_1_0; }

		//QualifiedName
		public RuleCall getDefinitionCallDefinitionQualifiedNameParserRuleCall_1_0_1() { return cDefinitionCallDefinitionQualifiedNameParserRuleCall_1_0_1; }

		//parameters+=Parameter*
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_0() { return cParametersParameterParserRuleCall_2_0; }

		//("sets" result=Variable)?
		public Group getGroup_3() { return cGroup_3; }

		//"sets"
		public Keyword getSetsKeyword_3_0() { return cSetsKeyword_3_0; }

		//result=Variable
		public Assignment getResultAssignment_3_1() { return cResultAssignment_3_1; }

		//Variable
		public RuleCall getResultVariableParserRuleCall_3_1_0() { return cResultVariableParserRuleCall_3_1_0; }
	}

	public class SuiteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Suite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSuiteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDefinitionSuiteDefinitionCrossReference_1_0 = (CrossReference)cDefinitionAssignment_1.eContents().get(0);
		private final RuleCall cDefinitionSuiteDefinitionQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cDefinitionSuiteDefinitionCrossReference_1_0.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersSuiteParameterParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOnKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cForkAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cForkForkDefinitionCrossReference_3_1_0 = (CrossReference)cForkAssignment_3_1.eContents().get(0);
		private final RuleCall cForkForkDefinitionQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cForkForkDefinitionCrossReference_3_1_0.eContents().get(1);
		
		//Suite:
		//	"suite" definition=[SuiteDefinition|QualifiedName] parameters+=SuiteParameter* ("on"
		//	fork=[ForkDefinition|QualifiedName])?;
		public ParserRule getRule() { return rule; }

		//"suite" definition=[SuiteDefinition|QualifiedName] parameters+=SuiteParameter* ("on"
		//fork=[ForkDefinition|QualifiedName])?
		public Group getGroup() { return cGroup; }

		//"suite"
		public Keyword getSuiteKeyword_0() { return cSuiteKeyword_0; }

		//definition=[SuiteDefinition|QualifiedName]
		public Assignment getDefinitionAssignment_1() { return cDefinitionAssignment_1; }

		//[SuiteDefinition|QualifiedName]
		public CrossReference getDefinitionSuiteDefinitionCrossReference_1_0() { return cDefinitionSuiteDefinitionCrossReference_1_0; }

		//QualifiedName
		public RuleCall getDefinitionSuiteDefinitionQualifiedNameParserRuleCall_1_0_1() { return cDefinitionSuiteDefinitionQualifiedNameParserRuleCall_1_0_1; }

		//parameters+=SuiteParameter*
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }

		//SuiteParameter
		public RuleCall getParametersSuiteParameterParserRuleCall_2_0() { return cParametersSuiteParameterParserRuleCall_2_0; }

		//("on" fork=[ForkDefinition|QualifiedName])?
		public Group getGroup_3() { return cGroup_3; }

		//"on"
		public Keyword getOnKeyword_3_0() { return cOnKeyword_3_0; }

		//fork=[ForkDefinition|QualifiedName]
		public Assignment getForkAssignment_3_1() { return cForkAssignment_3_1; }

		//[ForkDefinition|QualifiedName]
		public CrossReference getForkForkDefinitionCrossReference_3_1_0() { return cForkForkDefinitionCrossReference_3_1_0; }

		//QualifiedName
		public RuleCall getForkForkDefinitionQualifiedNameParserRuleCall_3_1_0_1() { return cForkForkDefinitionQualifiedNameParserRuleCall_3_1_0_1; }
	}

	public class SuiteParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SuiteParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameVariableEntityCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameVariableEntityQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cNameVariableEntityCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//SuiteParameter:
		//	name=[VariableEntity|QualifiedName] ":" value=Value;
		public ParserRule getRule() { return rule; }

		//name=[VariableEntity|QualifiedName] ":" value=Value
		public Group getGroup() { return cGroup; }

		//name=[VariableEntity|QualifiedName]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//[VariableEntity|QualifiedName]
		public CrossReference getNameVariableEntityCrossReference_0_0() { return cNameVariableEntityCrossReference_0_0; }

		//QualifiedName
		public RuleCall getNameVariableEntityQualifiedNameParserRuleCall_0_0_1() { return cNameVariableEntityQualifiedNameParserRuleCall_0_0_1; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameParameterNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueOrEnumValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Parameter:
		//	name=ParameterName ":" value=ValueOrEnumValue;
		public ParserRule getRule() { return rule; }

		//name=ParameterName ":" value=ValueOrEnumValue
		public Group getGroup() { return cGroup; }

		//name=ParameterName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ParameterName
		public RuleCall getNameParameterNameParserRuleCall_0_0() { return cNameParameterNameParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=ValueOrEnumValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//ValueOrEnumValue
		public RuleCall getValueValueOrEnumValueParserRuleCall_2_0() { return cValueValueOrEnumValueParserRuleCall_2_0; }
	}

	public class ParameterNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFixedParameterNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArbitraryParameterOrResultNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ParameterName:
		//	FixedParameterName | ArbitraryParameterOrResultName;
		public ParserRule getRule() { return rule; }

		//FixedParameterName | ArbitraryParameterOrResultName
		public Alternatives getAlternatives() { return cAlternatives; }

		//FixedParameterName
		public RuleCall getFixedParameterNameParserRuleCall_0() { return cFixedParameterNameParserRuleCall_0; }

		//ArbitraryParameterOrResultName
		public RuleCall getArbitraryParameterOrResultNameParserRuleCall_1() { return cArbitraryParameterOrResultNameParserRuleCall_1; }
	}

	public class FixedParameterNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FixedParameterName");
		private final Assignment cAnnotationAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cAnnotationJvmAnnotationReferenceCrossReference_0 = (CrossReference)cAnnotationAssignment.eContents().get(0);
		private final RuleCall cAnnotationJvmAnnotationReferenceIDTerminalRuleCall_0_1 = (RuleCall)cAnnotationJvmAnnotationReferenceCrossReference_0.eContents().get(1);
		
		//FixedParameterName:
		//	annotation=[jvmTypes::JvmAnnotationReference];
		public ParserRule getRule() { return rule; }

		//annotation=[jvmTypes::JvmAnnotationReference]
		public Assignment getAnnotationAssignment() { return cAnnotationAssignment; }

		//[jvmTypes::JvmAnnotationReference]
		public CrossReference getAnnotationJvmAnnotationReferenceCrossReference_0() { return cAnnotationJvmAnnotationReferenceCrossReference_0; }

		//ID
		public RuleCall getAnnotationJvmAnnotationReferenceIDTerminalRuleCall_0_1() { return cAnnotationJvmAnnotationReferenceIDTerminalRuleCall_0_1; }
	}

	public class ArbitraryParameterOrResultNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArbitraryParameterOrResultName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		
		//ArbitraryParameterOrResultName:
		//	"+" identifier=ID;
		public ParserRule getRule() { return rule; }

		//"+" identifier=ID
		public Group getGroup() { return cGroup; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//identifier=ID
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_0() { return cIdentifierIDTerminalRuleCall_1_0; }
	}

	public class ValueOrEnumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueOrEnumValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ValueOrEnumValue:
		//	Value | EnumValue;
		public ParserRule getRule() { return rule; }

		//Value | EnumValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//Value
		public RuleCall getValueParserRuleCall_0() { return cValueParserRuleCall_0; }

		//EnumValue
		public RuleCall getEnumValueParserRuleCall_1() { return cEnumValueParserRuleCall_1; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDecimalValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVariableParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Value:
		//	StringValue | IntegerValue | DecimalValue | Variable;
		public ParserRule getRule() { return rule; }

		//StringValue | IntegerValue | DecimalValue | Variable
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringValue
		public RuleCall getStringValueParserRuleCall_0() { return cStringValueParserRuleCall_0; }

		//IntegerValue
		public RuleCall getIntegerValueParserRuleCall_1() { return cIntegerValueParserRuleCall_1; }

		//DecimalValue
		public RuleCall getDecimalValueParserRuleCall_2() { return cDecimalValueParserRuleCall_2; }

		//Variable
		public RuleCall getVariableParserRuleCall_3() { return cVariableParserRuleCall_3; }
	}

	public class IntegerValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerValue");
		private final Assignment cIntegerValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIntegerValueINTEGERTerminalRuleCall_0 = (RuleCall)cIntegerValueAssignment.eContents().get(0);
		
		//IntegerValue:
		//	integerValue=INTEGER;
		public ParserRule getRule() { return rule; }

		//integerValue=INTEGER
		public Assignment getIntegerValueAssignment() { return cIntegerValueAssignment; }

		//INTEGER
		public RuleCall getIntegerValueINTEGERTerminalRuleCall_0() { return cIntegerValueINTEGERTerminalRuleCall_0; }
	}

	public class DecimalValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DecimalValue");
		private final Assignment cDecimalValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDecimalValueDECIMALTerminalRuleCall_0 = (RuleCall)cDecimalValueAssignment.eContents().get(0);
		
		//DecimalValue:
		//	decimalValue=DECIMAL;
		public ParserRule getRule() { return rule; }

		//decimalValue=DECIMAL
		public Assignment getDecimalValueAssignment() { return cDecimalValueAssignment; }

		//DECIMAL
		public RuleCall getDecimalValueDECIMALTerminalRuleCall_0() { return cDecimalValueDECIMALTerminalRuleCall_0; }
	}

	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringValue");
		private final Assignment cStringValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStringValueSTRINGTerminalRuleCall_0 = (RuleCall)cStringValueAssignment.eContents().get(0);
		
		//StringValue:
		//	stringValue=STRING;
		public ParserRule getRule() { return rule; }

		//stringValue=STRING
		public Assignment getStringValueAssignment() { return cStringValueAssignment; }

		//STRING
		public RuleCall getStringValueSTRINGTerminalRuleCall_0() { return cStringValueSTRINGTerminalRuleCall_0; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cNameVariableEntityCrossReference_0 = (CrossReference)cNameAssignment.eContents().get(0);
		private final RuleCall cNameVariableEntityQualifiedNameParserRuleCall_0_1 = (RuleCall)cNameVariableEntityCrossReference_0.eContents().get(1);
		
		//Variable:
		//	name=[VariableEntity|QualifiedName];
		public ParserRule getRule() { return rule; }

		//name=[VariableEntity|QualifiedName]
		public Assignment getNameAssignment() { return cNameAssignment; }

		//[VariableEntity|QualifiedName]
		public CrossReference getNameVariableEntityCrossReference_0() { return cNameVariableEntityCrossReference_0; }

		//QualifiedName
		public RuleCall getNameVariableEntityQualifiedNameParserRuleCall_0_1() { return cNameVariableEntityQualifiedNameParserRuleCall_0_1; }
	}

	public class EnumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumValue");
		private final Assignment cEnumValueAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cEnumValueJvmEnumerationLiteralCrossReference_0 = (CrossReference)cEnumValueAssignment.eContents().get(0);
		private final RuleCall cEnumValueJvmEnumerationLiteralUPPERCASE_IDTerminalRuleCall_0_1 = (RuleCall)cEnumValueJvmEnumerationLiteralCrossReference_0.eContents().get(1);
		
		//EnumValue:
		//	enumValue=[jvmTypes::JvmEnumerationLiteral|UPPERCASE_ID];
		public ParserRule getRule() { return rule; }

		//enumValue=[jvmTypes::JvmEnumerationLiteral|UPPERCASE_ID]
		public Assignment getEnumValueAssignment() { return cEnumValueAssignment; }

		//[jvmTypes::JvmEnumerationLiteral|UPPERCASE_ID]
		public CrossReference getEnumValueJvmEnumerationLiteralCrossReference_0() { return cEnumValueJvmEnumerationLiteralCrossReference_0; }

		//UPPERCASE_ID
		public RuleCall getEnumValueJvmEnumerationLiteralUPPERCASE_IDTerminalRuleCall_0_1() { return cEnumValueJvmEnumerationLiteralUPPERCASE_IDTerminalRuleCall_0_1; }
	}

	public class MethodReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeJvmTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeJvmTypeQualifiedJavaClassNameParserRuleCall_0_0_1 = (RuleCall)cTypeJvmTypeCrossReference_0_0.eContents().get(1);
		private final Keyword cNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMethodAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMethodJvmOperationCrossReference_2_0 = (CrossReference)cMethodAssignment_2.eContents().get(0);
		private final RuleCall cMethodJvmOperationIDTerminalRuleCall_2_0_1 = (RuleCall)cMethodJvmOperationCrossReference_2_0.eContents().get(1);
		
		//MethodReference:
		//	type=[jvmTypes::JvmType|QualifiedJavaClassName] "#" method=[jvmTypes::JvmOperation];
		public ParserRule getRule() { return rule; }

		//type=[jvmTypes::JvmType|QualifiedJavaClassName] "#" method=[jvmTypes::JvmOperation]
		public Group getGroup() { return cGroup; }

		//type=[jvmTypes::JvmType|QualifiedJavaClassName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[jvmTypes::JvmType|QualifiedJavaClassName]
		public CrossReference getTypeJvmTypeCrossReference_0_0() { return cTypeJvmTypeCrossReference_0_0; }

		//QualifiedJavaClassName
		public RuleCall getTypeJvmTypeQualifiedJavaClassNameParserRuleCall_0_0_1() { return cTypeJvmTypeQualifiedJavaClassNameParserRuleCall_0_0_1; }

		//"#"
		public Keyword getNumberSignKeyword_1() { return cNumberSignKeyword_1; }

		//method=[jvmTypes::JvmOperation]
		public Assignment getMethodAssignment_2() { return cMethodAssignment_2; }

		//[jvmTypes::JvmOperation]
		public CrossReference getMethodJvmOperationCrossReference_2_0() { return cMethodJvmOperationCrossReference_2_0; }

		//ID
		public RuleCall getMethodJvmOperationIDTerminalRuleCall_2_0_1() { return cMethodJvmOperationIDTerminalRuleCall_2_0_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class QualifiedJavaClassNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedJavaClassName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cUPPERCASE_IDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//QualifiedJavaClassName:
		//	QualifiedName "." UPPERCASE_ID;
		public ParserRule getRule() { return rule; }

		//QualifiedName "." UPPERCASE_ID
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//UPPERCASE_ID
		public RuleCall getUPPERCASE_IDTerminalRuleCall_2() { return cUPPERCASE_IDTerminalRuleCall_2; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	
	
	private ModelElements pModel;
	private StatementElements pStatement;
	private VisibleSingleLineCommentElements pVisibleSingleLineComment;
	private VisibleMultiLineCommentElements pVisibleMultiLineComment;
	private PackageDefinitionElements pPackageDefinition;
	private PackageStatementElements pPackageStatement;
	private ImportElements pImport;
	private ForkDefinitionElements pForkDefinition;
	private TestDefinitionElements pTestDefinition;
	private CallDefinitionElements pCallDefinition;
	private SuiteDefinitionElements pSuiteDefinition;
	private SuiteStatementElements pSuiteStatement;
	private SuiteStatementWithResultElements pSuiteStatementWithResult;
	private VariableDefinitionElements pVariableDefinition;
	private VariableEntityElements pVariableEntity;
	private TestElements pTest;
	private TableTestElements pTableTest;
	private TableTestRowElements pTableTestRow;
	private ParameterTableHeaderElements pParameterTableHeader;
	private ResultTableHeaderElements pResultTableHeader;
	private ParameterTableValueElements pParameterTableValue;
	private NamedResultElements pNamedResult;
	private ResultNameElements pResultName;
	private FixedResultNameElements pFixedResultName;
	private CallElements pCall;
	private SuiteElements pSuite;
	private SuiteParameterElements pSuiteParameter;
	private ParameterElements pParameter;
	private ParameterNameElements pParameterName;
	private FixedParameterNameElements pFixedParameterName;
	private ArbitraryParameterOrResultNameElements pArbitraryParameterOrResultName;
	private ValueOrEnumValueElements pValueOrEnumValue;
	private ValueElements pValue;
	private IntegerValueElements pIntegerValue;
	private DecimalValueElements pDecimalValue;
	private StringValueElements pStringValue;
	private VariableElements pVariable;
	private EnumValueElements pEnumValue;
	private MethodReferenceElements pMethodReference;
	private QualifiedNameElements pQualifiedName;
	private QualifiedJavaClassNameElements pQualifiedJavaClassName;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private TerminalRule tUPPERCASE_ID;
	private TerminalRule tID;
	private TerminalRule tINTEGER;
	private TerminalRule tDECIMAL;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tSL_VISIBLE_COMMENT;
	private TerminalRule tML_VISIBLE_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public DSLGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//Model:
	//	statements+=Statement*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Statement:
	//	PackageDefinition | Import | Suite;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//VisibleSingleLineComment:
	//	content=SL_VISIBLE_COMMENT;
	public VisibleSingleLineCommentElements getVisibleSingleLineCommentAccess() {
		return (pVisibleSingleLineComment != null) ? pVisibleSingleLineComment : (pVisibleSingleLineComment = new VisibleSingleLineCommentElements());
	}
	
	public ParserRule getVisibleSingleLineCommentRule() {
		return getVisibleSingleLineCommentAccess().getRule();
	}

	//VisibleMultiLineComment:
	//	content=ML_VISIBLE_COMMENT;
	public VisibleMultiLineCommentElements getVisibleMultiLineCommentAccess() {
		return (pVisibleMultiLineComment != null) ? pVisibleMultiLineComment : (pVisibleMultiLineComment = new VisibleMultiLineCommentElements());
	}
	
	public ParserRule getVisibleMultiLineCommentRule() {
		return getVisibleMultiLineCommentAccess().getRule();
	}

	//PackageDefinition:
	//	"packagedef" name=QualifiedName "with" statements+=PackageStatement* "packageend";
	public PackageDefinitionElements getPackageDefinitionAccess() {
		return (pPackageDefinition != null) ? pPackageDefinition : (pPackageDefinition = new PackageDefinitionElements());
	}
	
	public ParserRule getPackageDefinitionRule() {
		return getPackageDefinitionAccess().getRule();
	}

	//PackageStatement:
	//	Import | ForkDefinition | TestDefinition | CallDefinition | SuiteDefinition | VariableDefinition;
	public PackageStatementElements getPackageStatementAccess() {
		return (pPackageStatement != null) ? pPackageStatement : (pPackageStatement = new PackageStatementElements());
	}
	
	public ParserRule getPackageStatementRule() {
		return getPackageStatementAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedNameWithWildcard;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//ForkDefinition:
	//	"forkdef" name=QualifiedName;
	public ForkDefinitionElements getForkDefinitionAccess() {
		return (pForkDefinition != null) ? pForkDefinition : (pForkDefinition = new ForkDefinitionElements());
	}
	
	public ParserRule getForkDefinitionRule() {
		return getForkDefinitionAccess().getRule();
	}

	//TestDefinition:
	//	"testdef" name=QualifiedName "uses" fixtureMethod=MethodReference;
	public TestDefinitionElements getTestDefinitionAccess() {
		return (pTestDefinition != null) ? pTestDefinition : (pTestDefinition = new TestDefinitionElements());
	}
	
	public ParserRule getTestDefinitionRule() {
		return getTestDefinitionAccess().getRule();
	}

	//CallDefinition:
	//	"calldef" name=QualifiedName "uses" fixtureMethod=MethodReference;
	public CallDefinitionElements getCallDefinitionAccess() {
		return (pCallDefinition != null) ? pCallDefinition : (pCallDefinition = new CallDefinitionElements());
	}
	
	public ParserRule getCallDefinitionRule() {
		return getCallDefinitionAccess().getRule();
	}

	//SuiteDefinition:
	//	"suitedef" name=QualifiedName ("gets" parameters+=VariableEntity*)? ("requires"
	//	dependencies+=[SuiteDefinition|QualifiedName]*)? "with" statements+=SuiteStatement* "suiteend" ("concludedby"
	//	finalizers+=[SuiteDefinition|QualifiedName]*)?;
	public SuiteDefinitionElements getSuiteDefinitionAccess() {
		return (pSuiteDefinition != null) ? pSuiteDefinition : (pSuiteDefinition = new SuiteDefinitionElements());
	}
	
	public ParserRule getSuiteDefinitionRule() {
		return getSuiteDefinitionAccess().getRule();
	}

	//SuiteStatement:
	//	SuiteStatementWithResult | Call | VariableDefinition | VisibleSingleLineComment | VisibleMultiLineComment;
	public SuiteStatementElements getSuiteStatementAccess() {
		return (pSuiteStatement != null) ? pSuiteStatement : (pSuiteStatement = new SuiteStatementElements());
	}
	
	public ParserRule getSuiteStatementRule() {
		return getSuiteStatementAccess().getRule();
	}

	//SuiteStatementWithResult:
	//	Suite | Test | TableTest;
	public SuiteStatementWithResultElements getSuiteStatementWithResultAccess() {
		return (pSuiteStatementWithResult != null) ? pSuiteStatementWithResult : (pSuiteStatementWithResult = new SuiteStatementWithResultElements());
	}
	
	public ParserRule getSuiteStatementWithResultRule() {
		return getSuiteStatementWithResultAccess().getRule();
	}

	//VariableDefinition:
	//	"variable" name=VariableEntity ("initially" initialValue=Value)?;
	public VariableDefinitionElements getVariableDefinitionAccess() {
		return (pVariableDefinition != null) ? pVariableDefinition : (pVariableDefinition = new VariableDefinitionElements());
	}
	
	public ParserRule getVariableDefinitionRule() {
		return getVariableDefinitionAccess().getRule();
	}

	//VariableEntity:
	//	name=QualifiedName;
	public VariableEntityElements getVariableEntityAccess() {
		return (pVariableEntity != null) ? pVariableEntity : (pVariableEntity = new VariableEntityElements());
	}
	
	public ParserRule getVariableEntityRule() {
		return getVariableEntityAccess().getRule();
	}

	//Test:
	//	"test" definition=[TestDefinition|QualifiedName] parameters+=Parameter* results+=NamedResult* ("="
	//	result=ValueOrEnumValue)?;
	public TestElements getTestAccess() {
		return (pTest != null) ? pTest : (pTest = new TestElements());
	}
	
	public ParserRule getTestRule() {
		return getTestAccess().getRule();
	}

	//TableTest:
	//	"tabletest" definition=[TestDefinition|QualifiedName] parameters+=Parameter* parameterHeaders+=ParameterTableHeader*
	//	resultHeaders+=ResultTableHeader* ("|" "=" "|" | "|") rows+=TableTestRow+;
	public TableTestElements getTableTestAccess() {
		return (pTableTest != null) ? pTableTest : (pTableTest = new TableTestElements());
	}
	
	public ParserRule getTableTestRule() {
		return getTableTestAccess().getRule();
	}

	//TableTestRow:
	//	{TableTestRow} values+=ParameterTableValue* ("|" "=" result=ValueOrEnumValue "|" | "|");
	public TableTestRowElements getTableTestRowAccess() {
		return (pTableTestRow != null) ? pTableTestRow : (pTableTestRow = new TableTestRowElements());
	}
	
	public ParserRule getTableTestRowRule() {
		return getTableTestRowAccess().getRule();
	}

	//ParameterTableHeader:
	//	"|" name=ParameterName;
	public ParameterTableHeaderElements getParameterTableHeaderAccess() {
		return (pParameterTableHeader != null) ? pParameterTableHeader : (pParameterTableHeader = new ParameterTableHeaderElements());
	}
	
	public ParserRule getParameterTableHeaderRule() {
		return getParameterTableHeaderAccess().getRule();
	}

	//ResultTableHeader:
	//	"|" name=ResultName "=";
	public ResultTableHeaderElements getResultTableHeaderAccess() {
		return (pResultTableHeader != null) ? pResultTableHeader : (pResultTableHeader = new ResultTableHeaderElements());
	}
	
	public ParserRule getResultTableHeaderRule() {
		return getResultTableHeaderAccess().getRule();
	}

	//ParameterTableValue:
	//	"|" value=ValueOrEnumValue;
	public ParameterTableValueElements getParameterTableValueAccess() {
		return (pParameterTableValue != null) ? pParameterTableValue : (pParameterTableValue = new ParameterTableValueElements());
	}
	
	public ParserRule getParameterTableValueRule() {
		return getParameterTableValueAccess().getRule();
	}

	//NamedResult:
	//	name=ResultName "=" value=ValueOrEnumValue;
	public NamedResultElements getNamedResultAccess() {
		return (pNamedResult != null) ? pNamedResult : (pNamedResult = new NamedResultElements());
	}
	
	public ParserRule getNamedResultRule() {
		return getNamedResultAccess().getRule();
	}

	//ResultName:
	//	FixedResultName | ArbitraryParameterOrResultName;
	public ResultNameElements getResultNameAccess() {
		return (pResultName != null) ? pResultName : (pResultName = new ResultNameElements());
	}
	
	public ParserRule getResultNameRule() {
		return getResultNameAccess().getRule();
	}

	//FixedResultName:
	//	field=[jvmTypes::JvmField];
	public FixedResultNameElements getFixedResultNameAccess() {
		return (pFixedResultName != null) ? pFixedResultName : (pFixedResultName = new FixedResultNameElements());
	}
	
	public ParserRule getFixedResultNameRule() {
		return getFixedResultNameAccess().getRule();
	}

	//Call:
	//	"call" definition=[CallDefinition|QualifiedName] parameters+=Parameter* ("sets" result=Variable)?;
	public CallElements getCallAccess() {
		return (pCall != null) ? pCall : (pCall = new CallElements());
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}

	//Suite:
	//	"suite" definition=[SuiteDefinition|QualifiedName] parameters+=SuiteParameter* ("on"
	//	fork=[ForkDefinition|QualifiedName])?;
	public SuiteElements getSuiteAccess() {
		return (pSuite != null) ? pSuite : (pSuite = new SuiteElements());
	}
	
	public ParserRule getSuiteRule() {
		return getSuiteAccess().getRule();
	}

	//SuiteParameter:
	//	name=[VariableEntity|QualifiedName] ":" value=Value;
	public SuiteParameterElements getSuiteParameterAccess() {
		return (pSuiteParameter != null) ? pSuiteParameter : (pSuiteParameter = new SuiteParameterElements());
	}
	
	public ParserRule getSuiteParameterRule() {
		return getSuiteParameterAccess().getRule();
	}

	//Parameter:
	//	name=ParameterName ":" value=ValueOrEnumValue;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//ParameterName:
	//	FixedParameterName | ArbitraryParameterOrResultName;
	public ParameterNameElements getParameterNameAccess() {
		return (pParameterName != null) ? pParameterName : (pParameterName = new ParameterNameElements());
	}
	
	public ParserRule getParameterNameRule() {
		return getParameterNameAccess().getRule();
	}

	//FixedParameterName:
	//	annotation=[jvmTypes::JvmAnnotationReference];
	public FixedParameterNameElements getFixedParameterNameAccess() {
		return (pFixedParameterName != null) ? pFixedParameterName : (pFixedParameterName = new FixedParameterNameElements());
	}
	
	public ParserRule getFixedParameterNameRule() {
		return getFixedParameterNameAccess().getRule();
	}

	//ArbitraryParameterOrResultName:
	//	"+" identifier=ID;
	public ArbitraryParameterOrResultNameElements getArbitraryParameterOrResultNameAccess() {
		return (pArbitraryParameterOrResultName != null) ? pArbitraryParameterOrResultName : (pArbitraryParameterOrResultName = new ArbitraryParameterOrResultNameElements());
	}
	
	public ParserRule getArbitraryParameterOrResultNameRule() {
		return getArbitraryParameterOrResultNameAccess().getRule();
	}

	//ValueOrEnumValue:
	//	Value | EnumValue;
	public ValueOrEnumValueElements getValueOrEnumValueAccess() {
		return (pValueOrEnumValue != null) ? pValueOrEnumValue : (pValueOrEnumValue = new ValueOrEnumValueElements());
	}
	
	public ParserRule getValueOrEnumValueRule() {
		return getValueOrEnumValueAccess().getRule();
	}

	//Value:
	//	StringValue | IntegerValue | DecimalValue | Variable;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//IntegerValue:
	//	integerValue=INTEGER;
	public IntegerValueElements getIntegerValueAccess() {
		return (pIntegerValue != null) ? pIntegerValue : (pIntegerValue = new IntegerValueElements());
	}
	
	public ParserRule getIntegerValueRule() {
		return getIntegerValueAccess().getRule();
	}

	//DecimalValue:
	//	decimalValue=DECIMAL;
	public DecimalValueElements getDecimalValueAccess() {
		return (pDecimalValue != null) ? pDecimalValue : (pDecimalValue = new DecimalValueElements());
	}
	
	public ParserRule getDecimalValueRule() {
		return getDecimalValueAccess().getRule();
	}

	//StringValue:
	//	stringValue=STRING;
	public StringValueElements getStringValueAccess() {
		return (pStringValue != null) ? pStringValue : (pStringValue = new StringValueElements());
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//Variable:
	//	name=[VariableEntity|QualifiedName];
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//EnumValue:
	//	enumValue=[jvmTypes::JvmEnumerationLiteral|UPPERCASE_ID];
	public EnumValueElements getEnumValueAccess() {
		return (pEnumValue != null) ? pEnumValue : (pEnumValue = new EnumValueElements());
	}
	
	public ParserRule getEnumValueRule() {
		return getEnumValueAccess().getRule();
	}

	//MethodReference:
	//	type=[jvmTypes::JvmType|QualifiedJavaClassName] "#" method=[jvmTypes::JvmOperation];
	public MethodReferenceElements getMethodReferenceAccess() {
		return (pMethodReference != null) ? pMethodReference : (pMethodReference = new MethodReferenceElements());
	}
	
	public ParserRule getMethodReferenceRule() {
		return getMethodReferenceAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//QualifiedJavaClassName:
	//	QualifiedName "." UPPERCASE_ID;
	public QualifiedJavaClassNameElements getQualifiedJavaClassNameAccess() {
		return (pQualifiedJavaClassName != null) ? pQualifiedJavaClassName : (pQualifiedJavaClassName = new QualifiedJavaClassNameElements());
	}
	
	public ParserRule getQualifiedJavaClassNameRule() {
		return getQualifiedJavaClassNameAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//terminal UPPERCASE_ID:
	//	"A".."Z" ("A".."Z" | "a".."z" | "_" | "0".."9")*;
	public TerminalRule getUPPERCASE_IDRule() {
		return (tUPPERCASE_ID != null) ? tUPPERCASE_ID : (tUPPERCASE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UPPERCASE_ID"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INTEGER returns ecore::EBigInteger:
	//	"0".."9"+;
	public TerminalRule getINTEGERRule() {
		return (tINTEGER != null) ? tINTEGER : (tINTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INTEGER"));
	} 

	//terminal DECIMAL returns ecore::EBigDecimal:
	//	INTEGER "." INTEGER;
	public TerminalRule getDECIMALRule() {
		return (tDECIMAL != null) ? tDECIMAL : (tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DECIMAL"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal SL_VISIBLE_COMMENT:
	//	"--" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_VISIBLE_COMMENTRule() {
		return (tSL_VISIBLE_COMMENT != null) ? tSL_VISIBLE_COMMENT : (tSL_VISIBLE_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_VISIBLE_COMMENT"));
	} 

	//terminal ML_VISIBLE_COMMENT:
	//	"/-"->"-/";
	public TerminalRule getML_VISIBLE_COMMENTRule() {
		return (tML_VISIBLE_COMMENT != null) ? tML_VISIBLE_COMMENT : (tML_VISIBLE_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_VISIBLE_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
