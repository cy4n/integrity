// This is for issue 200
packagedef somevariablepackage with
	
	forkdef aFork1
		
	testdef isEqual uses de.gebit.integrity.experiments.fixtures.AdditionFixture#returnObject
		
	private variable aVariable
	
	suitedef test1 requires innerTest with
	
	suiteend

	private suitedef innerTest concludedby realNoopSuite with
	
		suite test2
	
	suiteend

	private suitedef test2 with

		assign 10 -> aVariable
		test isEqual value: aVariable = 10 // optional
		suite noopSuite on aFork1
		test isEqual value: aVariable = 10 // optional, but fails because value is 12
		assign (aVariable + 2) -> aVariable
		test isEqual value: aVariable = 12 // optional, but fails because value is 14
		
	suiteend
		
	private suitedef noopSuite with
		test isEqual value: aVariable = 10 // optional
	suiteend
	
	suitedef realNoopSuite with
		suite emptySuite on aFork1
	suiteend
	
	private suitedef emptySuite with
	suiteend
	
packageend




// This is for issue 192
packagedef somepackage with
	
	forkdef aFork1
	forkdef aFork2
	forkdef aFork3
	forkdef aFork4
		
	testdef isNotNull uses de.gebit.integrity.experiments.fixtures.AdditionFixture#isNotNull
		
	suitedef test1 with
			
		variable aVariable
		assign 10 -> aVariable
		suite testNotNull aParameterValue: aVariable on aFork2
			
		variable aVariable2
		suite generateAFour aReturnValue -> aVariable2 on aFork3
		test isNotNull object: aVariable2
			
		variable aVariable3
		assign 20 -> aVariable3
			
		suite testNotNull aParameterValue: aVariable3 on aFork1 // L1
		suite testNotNull aParameterValue: aVariable3 on aFork2 // L2
		suite testNotNull aParameterValue: aVariable3 on aFork3 // L3
		suite testNotNull aParameterValue: aVariable3 on aFork4 // L4
			
	suiteend
		
	private suitedef generateAFour returns aReturnValue with
		assign 4 -> aReturnValue
	suiteend
		
	private suitedef testNotNull gets aParameterValue with
		test isNotNull object: aParameterValue
	suiteend
	
packageend


// This is for issue 194
packagedef somepackage2 with
	
	forkdef aFork1
	forkdef aFork2
	forkdef aFork3
	forkdef aFork4
		
	testdef isNotNull uses de.gebit.integrity.experiments.fixtures.AdditionFixture#isNotNull
	calldef return10 uses de.gebit.integrity.experiments.fixtures.AdditionFixture#return10
		
	suitedef test1 with
			
		variable aVariable
		// assign 10 -> aVariable
		call return10 -> aVariable
		suite testNotNull aParameterValue: aVariable on aFork2
			
		variable aVariable2
		suite generateAFour aReturnValue -> aVariable2 on aFork3
		test isNotNull object: aVariable2
			
		variable aVariable3
		// assign 10 -> aVariable3
		call return10 -> aVariable3
			
		suite testNotNull aParameterValue: aVariable3 on aFork1 // L1
		suite testNotNull aParameterValue: aVariable3 on aFork2 // L2
		suite testNotNull aParameterValue: aVariable3 on aFork3 // L3
		suite testNotNull aParameterValue: aVariable3 on aFork4 // L4
		
	suiteend
		
	private suitedef generateAFour returns aReturnValue with
		call return10 -> aReturnValue
		// assign 10 -> aReturnValue
	suiteend
		
	private suitedef testNotNull gets aParameterValue with
		test isNotNull object: aParameterValue
	suiteend
	
packageend