<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <artifactId>integrity</artifactId>
    <groupId>de.gebit.integrity</groupId>
    <version>0.8.0-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>
  <artifactId>de.gebit.integrity.remoting</artifactId>
  <packaging>eclipse-plugin</packaging>
  <name>Integrity Test Framework - Remoting</name>
  
  <!-- We're building a fat jar including the sources right now for simplicity -->
  <build>
  	<resources>
  		<resource>
			<directory>${basedir}/src</directory>
		</resource>
  	</resources>
  	
  	<!-- This unzips the JDOM jar into the classes dir, so the compiled JDOM classes are added into the final jar in a
  	     "flat" way. This allows usage of the final jar in OSGI as well as non-OSGI environments. Unfortunately there
  	     is an undesired side-effect: because the jar file must be included into the OSGI classpath and the bin.includes
  	     of the build.properties as well, the lib jar is packaged into the final jar alongside the extracted classes.
  	     I'd love to find a better solution for this. -->
  	<plugins>
  		<plugin>
		    <groupId>org.apache.maven.plugins</groupId>
		    <artifactId>maven-antrun-plugin</artifactId>
		    <version>1.6</version>
		    <executions>
		        <execution>
		            <id>unpack</id>
		            <phase>compile</phase>
		            <configuration>
		                <tasks>
		                    <echo message="Unzipping JDOM jar" />
		                    <unzip src="lib/jdom-2.0.4.jar" dest="target/classes/" />
		                </tasks>
		            </configuration>
		            <goals>
		                <goal>run</goal>
		            </goals>
		        </execution>
		    </executions>
		</plugin>
  	</plugins>
  	
  	<pluginManagement>
  		<plugins>
  			<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
  			<plugin>
  				<groupId>org.eclipse.m2e</groupId>
  				<artifactId>lifecycle-mapping</artifactId>
  				<version>1.0.0</version>
  				<configuration>
  					<lifecycleMappingMetadata>
  						<pluginExecutions>
  							<pluginExecution>
  								<pluginExecutionFilter>
  									<groupId>
  										org.apache.maven.plugins
  									</groupId>
  									<artifactId>
  										maven-antrun-plugin
  									</artifactId>
  									<versionRange>
  										[1.6,)
  									</versionRange>
  									<goals>
  										<goal>run</goal>
  									</goals>
  								</pluginExecutionFilter>
  								<action>
  									<ignore></ignore>
  								</action>
  							</pluginExecution>
  						</pluginExecutions>
  					</lifecycleMappingMetadata>
  				</configuration>
  			</plugin>
  		</plugins>
  	</pluginManagement>
  </build>
</project>
