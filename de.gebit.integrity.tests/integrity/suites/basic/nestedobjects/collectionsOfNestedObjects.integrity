import integrity.fixtures.basic.arbitrary.echo
import integrity.fixtures.basic.beans.*

packagedef integrity.basic.nestedobjects with

	// These test the fix for issue #124: Arrays/Lists of nested objects inside nested objects can cause check errors
	
	suitedef collectionsOfNestedObjectsSuccess with
		
		test createNestedListTestBean = {
			inner: {
				firstParameter: "first"
				secondParameter: 2
				thirdParameter: null			
			}, {
				firstParameter: "second"
				secondParameter: 3
				thirdParameter: null	
			}, {
				firstParameter: "third"
				secondParameter: 4
				thirdParameter: null		
			}
		}
	
	suiteend
	
	
	suitedef collectionsOfNestedObjectsFailure with
		
		test createNestedListTestBean = {
			inner: {
				firstParameter: "first"
				secondParameter: 2
				thirdParameter: null			
			}, {
				firstParameter: "second"
				secondParameter: 99
				thirdParameter: null	
			}, {
				firstParameter: "third"
				secondParameter: 4
				thirdParameter: null		
			}
		}
	
	suiteend
	
	
	suitedef collectionsOfNestedObjectsIncomplete with
	
		// This test must still be successful even though we omitted secondParameter (because it is not to be tested)
		test createNestedListTestBean = {
			inner: {
				firstParameter: "first"
				thirdParameter: null			
			}, {
				firstParameter: "second"
				secondParameter: 3
				thirdParameter: null
			}, {
				firstParameter: "third"
				secondParameter: 4
				thirdParameter: null		
			}
		}
	
	suiteend
	
	
	// These test the fix for issue #125 - Nested object tests fail if an object contains a Collection with just one sub-object
	
	suitedef collectionsOfNestedObjectsSingleEntry with
	
		test createNestedListTestBeanParameterized innerObjects: 1 = {
			inner: {
				firstParameter: "first"
				secondParameter: 2
				thirdParameter: null			
			}
		}
	
	suiteend
	
	
	suitedef collectionsOfNestedObjectsSingleEntryFailure with
	
		test createNestedListTestBeanParameterized innerObjects: 1 = {
			inner: {
				firstParameter: "first"
				secondParameter: 3
				thirdParameter: null			
			}
		}
	
	suiteend
	
	
	// These test issue #139 - Comparison fails in case of single complex object inside array in another complex object
	// Both should be green; the bug made the first one fail, while the second succeeded
	
	suitedef singleComplexObjectInsideArrayInComplexObject with
	
		test createSimpleTestBeanArray elements: 1 = {
			elements: {
				firstParameter: "foo"
				secondParameter: 0
			}
		}
		
		test createSimpleTestBeanArray elements: 2 = {
			elements: {
				firstParameter: "foo"
				secondParameter: 0
			}, {
				firstParameter: "foo"
				secondParameter: 1
			}
		}
	
	suiteend
	
	
	suitedef listOfMaps with
	
		test returnListOfMaps = {
			key1: "value1"
			key2: "value2"
		}, {
			key3: "value3"
			key4: "value4"
		}
	
	suiteend
	
	
	suitedef listOfMapsWithSingleEntry with
	
		// This is expected to fail
		test returnListOfMapsWithSingleEntry = {
			key1: "value1"
			key2: "value2"
		}, {
			key3: "value3"
			key4: "value4"
		}
	
		// This should succeed
		test returnListOfMapsWithSingleEntry = {
			key1: "value1"
			key2: "value2"
		}
	
	suiteend
	
	
	suitedef listOfMapsOverVariable with
	
		variable someVariable
	
		call returnListOfMapsWithSingleEntryCall -> someVariable
		
		// This should be successful
		test validateListOfMapsWithSingleEntry list: someVariable
	
	suiteend
	
packageend