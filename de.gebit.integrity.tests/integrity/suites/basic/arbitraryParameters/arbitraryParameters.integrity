import integrity.fixtures.basic.arbitrary.*
import integrity.fixtures.basic.noop.*

packagedef integrity.basic.arbitraryParameters with

	suitedef arbitraryParameters with
	
		// Test a simple case
		test arbitraryParamEchoTest fixparam: 123 +testparam1: 400 +testparam2: "foo" = {
			fixedresult: 123
			arbitraryResults: {
				testresult1: 400
				testresult2: "foo"
			}
		}
		
		// Test a case with multiple values (https://github.com/integrity-tf/integrity/issues/28)
		test arbitraryParamEchoTest fixparam: 123 +testparam1: 1,2,3,4 = {
			fixedresult: 123
			arbitraryResults: {
				testresult1: 1,2,3,4
			}
		}
		
	suiteend
	
	suitedef arbitraryParametersAndBeans with
		// This suite tests the problematic case fixed in issue #52: https://github.com/integrity-tf/integrity/issues/52
	
		// Put a bean object into a variable
		variable var
		call arbitraryParamEcho fixparam: 123 +testparam1: 400 +testparam2: "foo" -> var
		
		// Now use the variable in an arbitrary parameter; the object inside must NOT be converted to a map!
		test arbitraryParamEchoTypesTest +myParam: var = "myParam|de.gebit.integrity.tests.fixtures.basic.ArbitraryParamEchoFixture$ResultClass"
	
	suiteend
	
	suitedef arbitraryParametersWithStringIdentifiers with
	
		// Test the same simple case as before, but now add a string-type arbitrary param
		test arbitraryParamEchoTest fixparam: 123 +testparam1: 400 +testparam2: "foo" +"testparam 3": "bar" = {
			fixedresult: 123
			arbitraryResults: {
				testresult1: 400
				testresult2: "foo"
				"testresult 3": "bar"
			}
		}
	
	suiteend

packageend