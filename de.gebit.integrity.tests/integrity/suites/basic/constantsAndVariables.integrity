import integrity.fixtures.basic.arbitrary.echo
import integrity.fixtures.basic.noop.*

packagedef integrity.basic with

	suitedef multiValueStringConstant with
		
		constant stringConst "1", "2"
		
		test echoStringArrayTest strings: stringConst = "1", "2"
	
	suiteend
	

	suitedef multiValueMapConstant with
			
		constant mapConst {
			key1: "The first map"
		}, {
			key1: "The second map"
		}
		
		test echoMapArrayTest map: mapConst =  {
			key1: "The first map"
		}, {
			key1: "The second map"
		}
	
	suiteend
	
	
	suitedef variableAttributeAccessSuccess with
	
		variable testvar
		call integrity.fixtures.basic.beans.createSimpleBeanUntypedCall -> testvar
		
		test echoStringTest string: testvar#firstParameter = "string"		
		test echoIntegerTest integer: testvar#secondParameter = 100
	
	suiteend
	
	
	suitedef variableAttributeAccessAttributeNotFound with
	
		variable testvar
		call integrity.fixtures.basic.beans.createSimpleBeanUntypedCall -> testvar
		
		test echoStringTest string: testvar#nonexistentParameter = "string"
	
	suiteend
	
	
	suitedef variableAttributeAccessNested with
	
		variable testvar
		call integrity.fixtures.basic.beans.createSimpleBeanUntypedCall -> testvar
		
		test echoStringTest string: testvar#thirdParameter.innerParameter = "1.99"
		
		call integrity.fixtures.basic.beans.createSimpleBeanUntypedEmptyCall -> testvar
		
		// thirdParameter is now null. That should not result in an exception, but simply return null for all nested attributes.
		test echoStringTest string: testvar#thirdParameter.innerParameter = null
	
	suiteend
	
	
	suitedef variableAssignment with
	
		 variable testvar		 		 
		 assign "abc" -> testvar
		 
		 test echoStringTest string: testvar = "abc"
		 
		 assign 123 -> testvar
		 		 
		 test echoIntegerTest integer: testvar = 123
		 
		 variable secondvar initially "foo"
		 
		 assign (secondvar .. "bar") -> testvar
		 
		 test echoStringTest string: testvar = "foobar"		
		 
		 assign {
			blah: 123
			blub: "This is a nice long string"
			inner: {
				deepStuff: "Yeah, we have more stuff in here!"
			}
		} -> testvar 
	
	suiteend
	
	
	constant testParameterizedConst parameterized
	constant testParameterizedConstWithDefault "bar" parameterized	
	
	suitedef parameterizedConstantNoDef with
		
		test echoStringTest string: testParameterizedConst = null
	
	suiteend
	
	
	suitedef parameterizedConstantDef with
		
		test echoStringTest string: testParameterizedConst = "foo"
	
	suiteend
	
	
	suitedef parameterizedConstantDefaultNoDef with
		
		test echoStringTest string: testParameterizedConstWithDefault = "bar"
	
	suiteend
	
	
	suitedef parameterizedConstantDefaultDef with
		
		test echoStringTest string: testParameterizedConstWithDefault = "foo"
	
	suiteend


packageend