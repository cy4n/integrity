/*
 * generated by Xtext
 */
package de.integrity.ui.contentassist;

import java.util.List;
import java.util.Map;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.common.types.util.jdt.IJavaElementFinder;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

import com.google.inject.Inject;

import de.integrity.dsl.Call;
import de.integrity.dsl.CallDefinition;
import de.integrity.dsl.Test;
import de.integrity.dsl.TestDefinition;
import de.integrity.ui.JavadocUtil;
import de.integrity.utils.ParamAnnotationTuple;
import de.integrity.utils.IntegrityDSLUtil;

/**
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on
 * how to customize content assistant
 */
public class DSLProposalProvider extends AbstractDSLProposalProvider {

	@Inject
	IJavaElementFinder elementFinder;

	@Override
	public void completeTest_Parameters(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		super.completeTest_Parameters(model, assignment, context, acceptor);

		Test tempTest = (Test) model;
		TestDefinition tempTestDef = tempTest.getDefinition();
		if (tempTestDef != null) {
			Map<String, String> tempJavadocMap = JavadocUtil.getMethodParamJavadoc(tempTest.getDefinition()
					.getFixtureMethod().getMethod(), elementFinder);

			List<ParamAnnotationTuple> tempParamList = IntegrityDSLUtil.getAllParamNamesFromFixtureMethod(tempTestDef
					.getFixtureMethod());
			for (ParamAnnotationTuple tempParam : tempParamList) {
				String tempJavadocDescription = tempJavadocMap != null ? tempJavadocMap.get(tempParam
						.getJavaParamName()) : null;
				String tempDisplayText = null;
				if (tempJavadocDescription != null) {
					tempDisplayText = tempParam.getParamName() + ": " + tempJavadocDescription;
				} else {
					tempDisplayText = tempParam.getParamName();
				}
				acceptor.accept(createCompletionProposal(tempParam.getParamName(), tempDisplayText, null, context));
			}
		}
	}

	@Override
	public void completeCall_Parameters(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		super.completeCall_Parameters(model, assignment, context, acceptor);

		Call tempCall = (Call) model;
		CallDefinition tempCallDef = tempCall.getDefinition();
		if (tempCallDef != null) {
			Map<String, String> tempJavadocMap = JavadocUtil.getMethodParamJavadoc(tempCall.getDefinition()
					.getFixtureMethod().getMethod(), elementFinder);

			List<ParamAnnotationTuple> tempParamList = IntegrityDSLUtil.getAllParamNamesFromFixtureMethod(tempCallDef
					.getFixtureMethod());
			for (ParamAnnotationTuple tempParam : tempParamList) {
				String tempJavadocDescription = tempJavadocMap != null ? tempJavadocMap.get(tempParam
						.getJavaParamName()) : null;
				String tempDisplayText = null;
				if (tempJavadocDescription != null) {
					tempDisplayText = tempParam.getParamName() + ": " + tempJavadocDescription;
				} else {
					tempDisplayText = tempParam.getParamName();
				}

				acceptor.accept(createCompletionProposal(tempParam.getParamName(), tempDisplayText, null, context));
			}
		}
	}

}
